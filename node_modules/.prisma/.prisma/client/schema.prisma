generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "rhel-openssl-1.0.x", "linux-musl-openssl-3.0.x"]
  engineType    = "library"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                          @id @default(autoincrement())
  username              String                       @unique
  password              String
  name                  String?
  email                 String?                      @unique
  role                  String                       @default("Encoder")
  isActive              Boolean                      @default(true)
  createdAt             DateTime                     @default(now())
  lastLogin             DateTime?
  department            String?
  auditLogs             AuditLog[]
  deactivatedDefects    MasterDefect[]
  requestedEditRequests OperationDefectEditRequest[] @relation("RequestedBy")
  resolvedEditRequests  OperationDefectEditRequest[] @relation("ResolvedBy")
  recordedDefects       OperationDefect[]            @relation("RecordedBy")
  encodedOperations     Operation[]                  @relation("EncodedBy")
  operations            Operation[]
  sessions              Session[]
  notifications         Notification[]

  @@map("users")
}

model ProductionOrder {
  id                        Int                          @id @default(autoincrement())
  poNumber                  String                       @unique
  lotNumber                 String?
  poQuantity                Int
  itemName                  String?
  status                    String
  currentOperation          String?
  currentOperationStartTime DateTime?
  currentOperationEndTime   DateTime?
  createdAt                 DateTime                     @default(now())
  updatedAt                 DateTime                     @updatedAt
  editingUserId             Int?
  editingUserName           String?
  lockedAt                  DateTime?
  costPerUnit               Decimal?                     @db.Decimal(10, 4)
  totalDefectCost           Decimal?                     @default(0) @db.Decimal(10, 2)
  lastCostUpdate            DateTime?
  editRequests              OperationDefectEditRequest[]
  operations                Operation[]

  @@map("production_orders")
}

model Operation {
  id                  Int                          @id @default(autoincrement())
  productionOrderId   Int
  operation           String
  operatorId          Int
  startTime           DateTime?
  endTime             DateTime?
  inputQuantity       Int
  outputQuantity      Int?
  productionHours     Float?
  accumulatedManHours Float?
  rf                  Int?
  lineNo              String?
  shift               String?
  encodedById         Int
  encodedTime         DateTime                     @default(now())
  defectCost          Decimal?                     @default(0) @db.Decimal(10, 2)
  editRequests        OperationDefectEditRequest[]
  operationDefects    OperationDefect[]
  encodedBy           User                         @relation("EncodedBy", fields: [encodedById], references: [id])
  operator            User                         @relation(fields: [operatorId], references: [id])
  productionOrder     ProductionOrder              @relation(fields: [productionOrderId], references: [id])

  @@map("operations")
}

model MasterDefect {
  id                  Int               @id @default(autoincrement())
  name                String
  description         String?
  category            String?
  applicableOperation String?
  reworkable          Boolean           @default(false)
  machine             String?
  isActive            Boolean           @default(true)
  deactivatedAt       DateTime?
  deactivatedById     Int?
  deactivatedBy       User?             @relation(fields: [deactivatedById], references: [id])
  operationDefects    OperationDefect[]

  @@unique([name, applicableOperation])
  @@map("master_defects")
}

model StandardCost {
  id          Int      @id @default(autoincrement())
  itemName    String   @unique
  description String?
  costPerUnit Decimal  @db.Decimal(10, 4)
  currency    String   @default("USD")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  updatedById Int?

  @@map("standard_costs")
}

model OperationDefect {
  id                  Int                          @id @default(autoincrement())
  operationId         Int
  defectId            Int?                         @map("defect_id")
  defectName          String?
  defectCategory      String
  defectMachine       String?
  defectReworkable    Boolean
  quantity            Int                          @default(0)
  quantityRework      Int                          @default(0)
  quantityNogood      Int                          @default(0)
  quantityReplacement Int                          @default(0)
  recordedAt          DateTime                     @default(now())
  recordedById        Int
  editRequests        OperationDefectEditRequest[]
  defect              MasterDefect?                @relation(fields: [defectId], references: [id])
  operation           Operation                    @relation(fields: [operationId], references: [id])
  recordedBy          User                         @relation("RecordedBy", fields: [recordedById], references: [id])

  @@unique([operationId, defectId, recordedAt])
  @@map("operation_defects")
}

model OperationDefectEditRequest {
  id                   Int              @id @default(autoincrement())
  operationDefectId    Int? // Make optional for "add" requests
  operationId          Int
  productionOrderId    Int
  requestedById        Int
  requestType          String           @default("edit") // "add", "edit", or "delete"
  defectId             Int? // Store master defect ID for "add" requests
  defectName           String? // Store defect name for "add" requests
  defectCategory       String? // Store category for "add" requests
  defectReworkable     Boolean? // Store reworkable for "add" requests
  defectMachine        String? // Store machine for "add" requests
  currentQty           Int
  currentRw            Int
  currentNg            Int
  currentReplacement   Int              @default(0)
  requestedQty         Int
  requestedRw          Int
  requestedNg          Int
  requestedReplacement Int              @default(0)
  operationCode        String? // To identify OP10 operations
  reason               String
  status               String           @default("pending")
  resolvedById         Int?
  resolutionNote       String?
  createdAt            DateTime         @default(now())
  resolvedAt           DateTime?
  operationDefect      OperationDefect? @relation(fields: [operationDefectId], references: [id])
  operation            Operation        @relation(fields: [operationId], references: [id])
  productionOrder      ProductionOrder  @relation(fields: [productionOrderId], references: [id])
  requestedBy          User             @relation("RequestedBy", fields: [requestedById], references: [id])
  resolvedBy           User?            @relation("ResolvedBy", fields: [resolvedById], references: [id])

  @@map("operation_defect_edit_requests")
}

model OperationStep {
  id              Int    @id @default(autoincrement())
  label           String
  operationNumber String @unique
  stepOrder       Int

  @@map("operation_steps")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  tableName String
  recordId  String
  action    String
  oldValues String?  @db.Text
  newValues String?  @db.Text
  userId    Int
  timestamp DateTime @default(now())
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  token        String   @unique
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  lastActivity DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Notification {
  id         String   @id @default(cuid())
  type       String // e.g., 'defect-edit', 'system', 'message', etc.
  title      String
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  linkUrl    String?
  userId     Int // ID of the user this notification is for
  sourceId   String? // ID of the related record (e.g., defect edit request ID)
  sourceType String? // Type of the related record (e.g., 'operation-defect-edit-request')
  metadata   Json? // Additional data specific to notification type

  // Add relationships as needed
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@map("notifications")
}

model OperationLine {
  id              Int    @id @default(autoincrement())
  operationNumber String // Corresponds to operationNumber in OperationStep (e.g., OP10, OP15)
  lineNumber      String // Line number (e.g., "Hilon Yatai Line 01")

  @@unique([operationNumber, lineNumber])
  @@map("operation_lines")
}
