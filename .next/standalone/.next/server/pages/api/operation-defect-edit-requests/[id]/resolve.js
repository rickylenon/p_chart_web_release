"use strict";(()=>{var e={};e.id=8902,e.ids=[8902],e.modules={53524:e=>{e.exports=require("@prisma/client")},98432:e=>{e.exports=require("bcryptjs")},60614:e=>{e.exports=require("next-auth/jwt")},62113:e=>{e.exports=require("next-auth/next")},47449:e=>{e.exports=require("next-auth/providers/credentials")},41649:e=>{e.exports=require("next-auth/react")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},65124:(e,t,o)=>{o.r(t),o.d(t,{config:()=>p,default:()=>l,routeModule:()=>f});var r={};o.r(r),o.d(r,{default:()=>c});var a=o(71802),n=o(47153),i=o(56249),d=o(66826),s=o(44507);async function u(e,t,o){if(console.log("Resolve Operation Defect Edit Request API called"),"PUT"!==e.method)return t.setHeader("Allow",["PUT"]),t.status(405).json({error:`Method ${e.method} Not Allowed`});try{let r="string"==typeof e.body?JSON.parse(e.body):e.body,{id:a}=e.query;if(!a||isNaN(Number(a)))return t.status(400).json({error:"Valid request ID is required"});let{status:n,comments:i}=r;if(!n||!["approved","rejected"].includes(n))return t.status(400).json({error:"Valid status (approved/rejected) is required"});let d=o?.user?.id;if(!d)return t.status(401).json({error:"Unauthorized - User not authenticated"});let u="string"==typeof d?parseInt(d,10):d,c=o?.user?.role||"",l="string"==typeof c&&"admin"===c.toLowerCase();if(console.log("User role:",c,"Is admin?",l),!l)return t.status(403).json({error:"Forbidden - Only admin users can resolve edit requests"});let p=await s.Z.operationDefectEditRequest.findUnique({where:{id:Number(a)},include:{operationDefect:{include:{defect:!0}},operation:!0,productionOrder:!0}});if(!p)return t.status(404).json({error:"Edit request not found"});if("pending"!==p.status)return t.status(400).json({error:"This request has already been resolved"});let f=await s.Z.$transaction(async e=>{let t=await e.operationDefectEditRequest.update({where:{id:Number(a)},data:{status:n,resolvedById:u,resolutionNote:i||null,resolvedAt:new Date},include:{operationDefect:{include:{defect:!0}},operation:!0,productionOrder:!0,requestedBy:{select:{id:!0,name:!0,email:!0}},resolvedBy:{select:{id:!0,name:!0,email:!0}}}});if("approved"===n){console.log("Approved request - updating defect values"),console.log("Request type:",p.requestType),console.log("Operation defect ID:",p.operationDefectId),console.log("Operation ID from request:",p.operationId),console.log("Requested values:",{quantity:p.requestedQty,quantityRework:p.requestedRw,quantityNogood:p.requestedNg});try{if("add"===p.requestType){console.log("Processing ADD request type"),console.log("Defect details:",{defectId:p.defectId,defectName:p.defectName,defectCategory:p.defectCategory,defectReworkable:p.defectReworkable});let t=await e.operationDefect.create({data:{operationId:p.operationId,defectId:p.defectId||void 0,defectName:p.defectName||"",defectCategory:p.defectCategory||"",defectMachine:p.defectMachine||void 0,defectReworkable:p.defectReworkable||!1,quantity:p.requestedQty,quantityRework:p.requestedRw,quantityNogood:p.requestedNg,quantityReplacement:p.operationCode?.toLowerCase()==="op10"?p.requestedReplacement||p.requestedQty:0,recordedById:u,recordedAt:new Date}});console.log("Created new defect:",t),await e.operationDefectEditRequest.update({where:{id:Number(a)},data:{operationDefectId:t.id}})}else{if(!p.operationDefectId)throw console.error("Error: No operationDefectId found for edit request"),Error("Cannot process edit request - missing operationDefectId");let t=await e.operationDefect.findUnique({where:{id:p.operationDefectId},include:{defect:!0}});if(console.log("Current defect values:",t),console.log("Current operation ID in defect:",t?.operationId),t&&t.operationId!==p.operationId){if(console.log("⚠️ DETECTED OPERATION ID MISMATCH! ⚠️"),console.log(`Defect operation ID (${t.operationId}) doesn't match request operation ID (${p.operationId})`),t.defect){console.log(`Looking for defect named "${t.defect.name}" in operation ${p.operationId}...`);let o=await e.operationDefect.findFirst({where:{operationId:p.operationId,defect:{name:t.defect.name}},include:{defect:!0}});if(o){let t=o.defect?.name||"unknown";console.log(`✅ Found matching defect: ID ${o.id}, name: "${t}" in operation ${o.operationId}`);let r=await e.operationDefect.update({where:{id:o.id},data:{quantity:p.requestedQty,quantityRework:p.requestedRw,quantityNogood:p.requestedNg,quantityReplacement:p.operationCode?.toLowerCase()==="op10"?p.requestedReplacement||p.requestedQty:o.quantityReplacement}});console.log("Updated correct defect values:",r)}else{console.log("Looking up defect by alternate name from editRequest data...");let t=p.operationDefect?.defect?.name||"";console.log(`Looking for "${t}" in operation ${p.operationId}`);let o=await e.operationDefect.findFirst({where:{operationId:p.operationId,defect:{name:{contains:t.trim()}}},include:{defect:!0}});if(o){let t=o.defect?.name||"unknown";console.log(`✅ Found alternate defect: ID ${o.id}, name: "${t}" in operation ${o.operationId}`);let r=await e.operationDefect.update({where:{id:o.id},data:{quantity:p.requestedQty,quantityRework:p.requestedRw,quantityNogood:p.requestedNg,quantityReplacement:p.operationCode?.toLowerCase()==="op10"?p.requestedReplacement||p.requestedQty:o.quantityReplacement}});console.log("Updated alternate defect values:",r)}else if(console.log("⚠️ No matching defect found by any name in the correct operation. Using original defect ID as fallback."),p.operationDefectId){let t=await e.operationDefect.update({where:{id:p.operationDefectId},data:{quantity:p.requestedQty,quantityRework:p.requestedRw,quantityNogood:p.requestedNg,quantityReplacement:p.operationCode?.toLowerCase()==="op10"?p.requestedReplacement||p.requestedQty:0}});console.log("Updated fallback defect values:",t)}else throw console.error("Cannot update defect - operationDefectId is null"),Error("Cannot update defect - missing operationDefectId")}}else console.log(`No defect reference found for operation defect ${t.id}`)}else{let t=await e.operationDefect.update({where:{id:p.operationDefectId},data:{quantity:p.requestedQty,quantityRework:p.requestedRw,quantityNogood:p.requestedNg,quantityReplacement:p.operationCode?.toLowerCase()==="op10"?p.requestedReplacement||p.requestedQty:0}});console.log("Updated defect values:",t)}}}catch(e){throw console.error("Error updating operation defect:",e),e}let t=await e.operationDefect.findMany({where:{operationId:p.operationId},include:{defect:!0}}),o=t.reduce((e,t)=>{let o=t.defectReworkable?t.quantity-t.quantityRework:t.quantity,r=t.defect?.name||"unknown";return console.log(`Defect: ${r}, Effective: ${o}`),e+o},0),r=t.reduce((e,t)=>e+(t.quantityReplacement||0),0);console.log(`Total replacements: ${r}`);let n=p.operation,i=Math.max(0,n.inputQuantity-o+r);console.log(`Recalculated output quantity: ${i} (Input: ${n.inputQuantity}, Defects: ${o}, Replacements: ${r})`),await e.operation.update({where:{id:p.operationId},data:{outputQuantity:i}});let d=await e.operation.findMany({where:{productionOrderId:p.productionOrderId},orderBy:{id:"asc"}}),s=d.findIndex(e=>e.id===p.operationId);if(s>=0&&s<d.length-1)for(let t=s+1;t<d.length;t++){let o=d[t-1],r=d[t];if(await e.operation.update({where:{id:r.id},data:{inputQuantity:o.outputQuantity||0}}),r.startTime){let t=await e.operationDefect.findMany({where:{operationId:r.id}}),a=t.reduce((e,t)=>{let o=t.defectReworkable?t.quantity-t.quantityRework:t.quantity;return e+o},0),n=t.reduce((e,t)=>e+(t.quantityReplacement||0),0),i=Math.max(0,(o.outputQuantity||0)-a+n);console.log(`Updating subsequent operation ${r.id} output quantity: ${i} (Input: ${o.outputQuantity||0}, Defects: ${a}, Replacements: ${n})`),await e.operation.update({where:{id:r.id},data:{outputQuantity:i}})}}}return t});console.log(`Edit request ${a} ${n}: ${f.resolvedAt}`);try{console.log("Creating notification for the requesting user");let e=f.requestedById;if(e){let t=await s.Z.notification.create({data:{type:"defect-edit",title:`Edit Request ${"approved"===n?"Approved":"Rejected"}`,message:`Your edit request for ${f.operationDefect?.defect?.name||`Defect ID: ${f.operationDefectId}`} on PO: ${f.productionOrder?.poNumber} has been ${n}${i?`. Note: ${i}`:""}`,userId:e,sourceId:f.id.toString(),sourceType:"operationDefectEditRequest",linkUrl:"/operation-defects-edit-requests",isRead:!1}});console.log("Notification created successfully in database:",t.id)}else console.error("Cannot create notification: No requestedById found")}catch(e){console.error("Error creating notification:",e)}return t.status(200).json({message:`Edit request ${n} successfully`,editRequest:f})}catch(e){return console.error("Error resolving edit request:",e),t.status(500).json({error:"Internal server error",details:e instanceof Error?e.message:"Unknown error"})}}let c=(0,d.QO)(u),l=(0,i.l)(r,"default"),p=(0,i.l)(r,"config"),f=new a.PagesAPIRouteModule({definition:{kind:n.x.PAGES_API,page:"/api/operation-defect-edit-requests/[id]/resolve",pathname:"/api/operation-defect-edit-requests/[id]/resolve",bundlePath:"",filename:""},userland:r})}};var t=require("../../../../webpack-api-runtime.js");t.C(e);var o=e=>t(t.s=e),r=t.X(0,[549],()=>o(65124));module.exports=r})();