"use strict";(()=>{var e={};e.id=9505,e.ids=[9505],e.modules={53524:e=>{e.exports=require("@prisma/client")},98432:e=>{e.exports=require("bcryptjs")},57641:e=>{e.exports=require("exceljs")},1738:e=>{e.exports=require("multer")},60614:e=>{e.exports=require("next-auth/jwt")},62113:e=>{e.exports=require("next-auth/next")},47449:e=>{e.exports=require("next-auth/providers/credentials")},41649:e=>{e.exports=require("next-auth/react")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},71017:e=>{e.exports=require("path")},12781:e=>{e.exports=require("stream")},58431:(e,t,r)=>{r.r(t),r.d(t,{config:()=>k,default:()=>b,routeModule:()=>v});var o={};r.r(o),r.d(o,{config:()=>w,default:()=>S});var a=r(71802),l=r(47153),s=r(56249),n=r(66826),i=r(44507),c=r(57641),d=r.n(c),u=r(1738),p=r.n(u),g=r(12781),m=r(71017),h=r.n(m);let f=p()({storage:p().memoryStorage(),limits:{fileSize:10485760},fileFilter:(e,t,r)=>{let o=h().extname(t.originalname).toLowerCase();if(".xlsx"!==o&&".xls"!==o)return r(Error("Only Excel files are allowed"));r(null,!0)}}),$=(e,t,r)=>new Promise((o,a)=>{r(e,t,e=>e instanceof Error?a(e):o(e))}),w={api:{bodyParser:!1}};async function x(e,t,r){try{if(console.log("API: MasterDefects import auth session validated, user:",r?.user?.name),"POST"!==e.method)return t.status(405).json({error:"Method not allowed"});console.log("Processing Excel import for master defects"),await $(e,t,f.single("file"));let o=e.file;if(!o)return t.status(400).json({error:"No file uploaded"});console.log(`Received file: ${o.originalname}, size: ${o.size} bytes`);let a=new g.Readable;a.push(o.buffer),a.push(null);let l=new(d()).Workbook;await l.xlsx.read(a);let s=l.worksheets[0];if(!s)return t.status(400).json({error:"Excel file contains no worksheets"});console.log(`Reading worksheet: ${s.name}`);let n={};s.getRow(1).eachCell((e,t)=>{n[e.value?.toString().trim()||""]=t});let i=["Name","Category","Reworkable"].filter(e=>!(e in n));if(i.length>0)return t.status(400).json({error:`Excel file is missing required columns: ${i.join(", ")}`});console.log("Headers validated:",n);let c=[],u=[],p=0;s.eachRow({includeEmpty:!1},(e,t)=>{if(1!==t)try{p++;let r=e.getCell(n.Name).value?.toString().trim(),o=n.Description?e.getCell(n.Description).value?.toString().trim():null,a=e.getCell(n.Category).value?.toString().trim(),l=n.Operation?e.getCell(n.Operation).value?.toString().trim():null,s=n.Machine?e.getCell(n.Machine).value?.toString().trim():null,i=e.getCell(n.Reworkable).value?.toString().trim(),d=n.Status?e.getCell(n.Status).value?.toString().trim():"Active";if(!r||!a){u.push(`Row ${t}: Missing required fields (name or category)`);return}c.push({defect:{name:r,description:o,category:a,applicableOperation:l||null,machine:s||null,reworkable:"Yes"===i||"yes"===i||"true"===i||"TRUE"===i||"1"===i,isActive:"Inactive"!==d&&"inactive"!==d&&"false"!==d&&"FALSE"!==d&&"0"!==d},rowNumber:t})}catch(e){u.push(`Error processing row ${t}: ${e instanceof Error?e.message:String(e)}`)}}),console.log(`Processed ${p} rows from Excel`),console.log(`Found ${c.length} defects to process`);let m=new Map,h=[];c.forEach(({defect:e,rowNumber:t})=>{let r=`${e.name}|${e.applicableOperation||"NULL"}`;m.has(r)?h.push(`Row ${t}: Duplicate of "${e.name}" + "${e.applicableOperation||"NULL"}"`):m.set(r,e)});let w=Array.from(m.values());console.log(`After deduplication: ${w.length} unique defects to create`),console.log(`Skipped ${h.length} duplicates within Excel file`),console.log(`Encountered ${u.length} errors`),console.log("Starting database import process...");let x=await E(w,u,h);return console.log(`Import completed: ${x.created} created, ${x.updated} updated, ${x.errors.length} total errors`),t.status(200).json({success:!0,...x,message:`Import completed: ${x.created} defects created, ${x.updated} defects updated, ${x.errors.length} errors`})}catch(e){return console.error("Error importing master defects from Excel:",e),t.status(500).json({error:"Failed to import master defects",message:e instanceof Error?e.message:String(e)})}}async function E(e,t,r){let o=[...t],a=0,l=0;console.log(`Processing ${e.length} defects with ultra-optimized approach for large dataset`);let s=Date.now();console.log(`⏱️ Import started at: ${new Date().toISOString()}`);try{let t=await i._.$transaction(async t=>{let r=0,a=0;console.log("Fetching all existing defects for bulk comparison...");let l=await t.masterDefect.findMany({select:{id:!0,name:!0,applicableOperation:!0}});console.log(`Found ${l.length} existing defects in database`);let s=new Map;l.forEach(e=>{let t=`${e.name}|${e.applicableOperation||"NULL"}`;s.set(t,e.id)});let n=[],i=[];if(e.forEach(e=>{let t=`${e.name}|${e.applicableOperation||"NULL"}`;s.has(t)?i.push({...e,id:s.get(t)}):n.push(e)}),console.log(`Separated: ${n.length} to create, ${i.length} to update`),e.length>1e3&&(console.log(`🚀 LARGE DATASET DETECTED: Processing ${e.length} items with ultra-optimization`),console.log(`📊 Breakdown: ${n.length} new items, ${i.length} updates`),console.log(`⚡ Expected chunks: ~${Math.ceil(n.length/200)} create chunks, ~${Math.ceil(i.length/30)} update chunks`)),n.length>0){console.log("Processing bulk creates...");for(let e=0;e<n.length;e+=200){let a=n.slice(e,e+200);try{let o=await t.masterDefect.createMany({data:a,skipDuplicates:!0});r+=o.count,console.log(`Created chunk ${Math.floor(e/200)+1}: ${o.count} defects`)}catch(l){for(let s of(console.error(`Create chunk ${Math.floor(e/200)+1} failed:`,l),a))try{await t.masterDefect.create({data:s}),r++}catch(e){o.push(`Create error "${s.name}": ${e instanceof Error?e.message:String(e)}`)}}}console.log(`Total created: ${r} defects`)}if(i.length>0){console.log("Processing bulk updates with parallel execution...");for(let e=0;e<i.length;e+=30){let r=i.slice(e,e+30),l=r.map(e=>t.masterDefect.update({where:{id:e.id},data:{name:e.name,description:e.description,category:e.category,applicableOperation:e.applicableOperation,machine:e.machine,reworkable:e.reworkable,isActive:e.isActive}}).then(()=>1).catch(t=>(o.push(`Update error "${e.name}": ${t instanceof Error?t.message:String(t)}`),0))),s=(await Promise.all(l)).reduce((e,t)=>e+t,0);a+=s,console.log(`Updated parallel chunk ${Math.floor(e/30)+1}: ${s}/${r.length} defects`)}console.log(`Total updated: ${a} defects`)}return{created:r,updated:a}},{timeout:55e3});a=t.created,l=t.updated;let r=((Date.now()-s)/1e3).toFixed(2);console.log(`✅ Ultra-optimized import completed successfully: ${a} created, ${l} updated, ${o.length} errors`),console.log(`⏱️ Total execution time: ${r} seconds`),console.log(`📈 Performance: ${Math.round(e.length/parseFloat(r))} items/second`)}catch(e){console.error("Ultra-optimized transaction failed:",e),o.push(`Transaction failed: ${e instanceof Error?e.message:String(e)}`)}return{created:a,updated:l,errors:o,duplicatesSkipped:r.length}}let S=(0,n.QO)(x),b=(0,s.l)(o,"default"),k=(0,s.l)(o,"config"),v=new a.PagesAPIRouteModule({definition:{kind:l.x.PAGES_API,page:"/api/master-defects/import",pathname:"/api/master-defects/import",bundlePath:"",filename:""},userland:o})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[549],()=>r(58431));module.exports=o})();