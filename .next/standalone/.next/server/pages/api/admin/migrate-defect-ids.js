"use strict";(()=>{var e={};e.id=6525,e.ids=[6525],e.modules={53524:e=>{e.exports=require("@prisma/client")},98432:e=>{e.exports=require("bcryptjs")},60614:e=>{e.exports=require("next-auth/jwt")},62113:e=>{e.exports=require("next-auth/next")},47449:e=>{e.exports=require("next-auth/providers/credentials")},41649:e=>{e.exports=require("next-auth/react")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},81454:(e,t,o)=>{o.r(t),o.d(t,{config:()=>u,default:()=>l,routeModule:()=>p});var d={};o.r(d),o.d(d,{default:()=>f});var r=o(71802),i=o(47153),a=o(56249),n=o(66826);let s=new(o(53524)).PrismaClient;async function c(e,t,o){if(o?.user?.role!=="ADMIN")return t.status(403).json({error:"Forbidden: Admin access required"});console.log("Running defect ID migration...");try{let e=await s.$queryRaw`
      SELECT COUNT(*) as count 
      FROM operation_defects 
      WHERE defect_id = 0 OR defect_id IS NULL
    `;console.log("Query result:",e);let o=Array.isArray(e)&&e.length>0&&"object"==typeof e[0]&&null!==e[0]&&"count"in e[0]?Number(e[0].count):0;if(console.log(`Found ${o} operation defects with null or zero defectId`),0===o)return t.status(200).json({message:"No defects with invalid IDs found."});let d=await s.$queryRaw`
      SELECT od.id, od.operation_id as "operationId", d.name as "defectName", 
             jsonb_build_object('id', o.id) as operation
      FROM operation_defects od
      JOIN operations o ON od.operation_id = o.id
      LEFT JOIN defects d ON d.name = od.defect_category
      WHERE od.defect_id = 0 OR od.defect_id IS NULL
    `;console.log(`Found ${d.length} defects with invalid IDs to update`);let r=0,i=[];for(let e of d)try{if(!e.defectName){i.push({id:e.id,reason:"No defect name available"}),console.log(`Failed to update defect ID for operation defect ${e.id}: No defect name available`);continue}let t=await s.masterDefect.findFirst({where:{name:e.defectName}});t?(await s.$executeRaw`
            UPDATE operation_defects
            SET defect_id = ${t.id}
            WHERE id = ${e.id}
          `,r++,console.log(`Updated defect ID for operation defect ${e.id} to defect ID ${t.id}`)):(i.push({id:e.id,defectName:e.defectName,reason:"No matching defect found"}),console.log(`Failed to update defect ID for operation defect ${e.id}: No matching defect found for ${e.defectName}`))}catch(t){console.error(`Error updating defect ID for operation defect ${e.id}:`,t),i.push({id:e.id,defectName:e.defectName,reason:t instanceof Error?t.message:String(t)})}return t.status(200).json({message:`Migration completed. Updated ${r} defect(s).`,failedCount:i.length,failed:i.length>0?i:void 0})}catch(e){return console.error("Error in defect ID migration:",e),t.status(500).json({error:"Failed to migrate defect IDs",details:e instanceof Error?e.message:String(e)})}}let f=(0,n.QO)(c),l=(0,a.l)(d,"default"),u=(0,a.l)(d,"config"),p=new r.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/admin/migrate-defect-ids",pathname:"/api/admin/migrate-defect-ids",bundlePath:"",filename:""},userland:d})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var o=e=>t(t.s=e),d=t.X(0,[549],()=>o(81454));module.exports=d})();