"use strict";(()=>{var e={};e.id=3106,e.ids=[3106],e.modules={53524:e=>{e.exports=require("@prisma/client")},98432:e=>{e.exports=require("bcryptjs")},60614:e=>{e.exports=require("next-auth/jwt")},62113:e=>{e.exports=require("next-auth/next")},47449:e=>{e.exports=require("next-auth/providers/credentials")},41649:e=>{e.exports=require("next-auth/react")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},436:(e,t,r)=>{r.r(t),r.d(t,{config:()=>c,default:()=>u,routeModule:()=>d});var o={};r.r(o),r.d(o,{default:()=>s});var a=r(71802),l=r(47153),n=r(56249),i=r(44507);let s=(0,r(66826).QO)(async function(e,t,r){if("GET"!==e.method)return t.status(405).json({error:"Method not allowed"});try{console.log("API: Dashboard stats auth session validated, user:",r?.user?.name),console.log("[PRISMA_DB] Fetching dashboard stats with query params:",e.query);let{year:o,month:a,line:l,series:n,status:s,poNumber:u}=e.query;if(o&&!/^\d{4}$/.test(o))return console.warn("[PRISMA_DB] Invalid year format:",o),t.status(400).json({error:"Invalid year format. Expected YYYY."});let c={},d={};if(console.log("[PRISMA_DB] Stats API received filter params:",e.query),o){console.log(`Filtering by year: ${o}`);let e=Array.isArray(o)?o[0]:o,r=parseInt(e);if(isNaN(r))return t.status(400).json({error:"Invalid year parameter"});let l=new Date(Date.UTC(r,0,1)),n=new Date(Date.UTC(r,11,31,23,59,59,999));if(c.startTime||(c.startTime={}),c.startTime.gte=l,c.startTime.lte=n,a&&"All"!==a){console.log(`Filtering by month: ${a}`);let e=Array.isArray(a)?a[0]:a,t=parseInt(e)-1,o=new Date(Date.UTC(r,t,1)),l=new Date(Date.UTC(r,t+1,0,23,59,59,999));c.startTime.gte=o,c.startTime.lte=l}}if(l&&"All"!==l&&(console.log(`Filtering by line: ${l}`),c.lineNo=Array.isArray(l)?l[0]:l),n&&"All"!==n&&(console.log(`Filtering by series: ${n}`),d.itemName=Array.isArray(n)?n[0]:n),s&&"All"!==s&&(console.log(`Filtering by status: ${s}`),d.status=Array.isArray(s)?s[0]:s),u){let e=Array.isArray(u)?u[0]:u;console.log(`[PRISMA_DB] Filtering by PO number: ${e}`);try{if(!await i._.productionOrder.findFirst({where:{poNumber:{contains:e}},select:{id:!0}}))return console.log(`[PRISMA_DB] No production order found with PO number containing: ${e}`),t.status(200).json({totalProduction:0,defectRate:0,inProgressPOs:0,machineUtilization:0,appliedFilters:{year:o||null,month:"All"!==a?a:null,line:"All"!==l?l:null,series:"All"!==n?n:null,status:"All"!==s?s:null,poNumber:e},noData:!0});d.poNumber={contains:e}}catch(t){console.error("[PRISMA_DB] Error checking PO existence:",t),d.poNumber={contains:e}}}Object.keys(d).length>0&&(c.productionOrder={is:d}),console.log("[PRISMA_DB] Final filter conditions:",JSON.stringify(c,null,2));let m=new Date;m.setHours(0,0,0,0),console.time("[PRISMA_DB] totalProduction-query");let y={};if(o||a){let e={};if(o){let t=parseInt(Array.isArray(o)?o[0]:o),r=new Date(Date.UTC(t,0,1)),l=new Date(Date.UTC(t,11,31,23,59,59,999));if(e.gte=r,e.lte=l,a&&"All"!==a){let r=Array.isArray(a)?a[0]:a,o=parseInt(r)-1,l=new Date(Date.UTC(t,o,1)),n=new Date(Date.UTC(t,o+1,0,23,59,59,999));e.gte=l,e.lte=n}}y.operations={some:{startTime:e}}}if(l&&"All"!==l){let e=Array.isArray(l)?l[0]:l;console.log(`Filtering by line: ${e}`),y.operations?y.operations.some.lineNo=e:y.operations={some:{lineNo:e}}}if(n&&"All"!==n){let e=Array.isArray(n)?n[0]:n;console.log(`Filtering by series: ${e}`),y.itemName=e}if(s&&"All"!==s){let e=Array.isArray(s)?s[0]:s;console.log(`Filtering by status: ${e}`),y.status=e}if(u){let e=Array.isArray(u)?u[0]:u;console.log(`Filtering by PO number: ${e}`),y.poNumber={contains:e}}console.log("[PRISMA_DB] Production Order filter for total production:",JSON.stringify(y,null,2));let A=await i._.productionOrder.aggregate({_sum:{poQuantity:!0},where:y});console.timeEnd("[PRISMA_DB] totalProduction-query"),console.log("[PRISMA_DB] Total production data (sum of PO quantities):",A);let p={startTime:{gte:m},...c};console.time("[PRISMA_DB] todaysOperations-query");let g=await i._.operation.findMany({where:p,include:{operationDefects:!0}});console.timeEnd("[PRISMA_DB] todaysOperations-query"),console.log("[PRISMA_DB] Today's operations:",g.length);let P=0,h=0;g.forEach(e=>{P+=e.inputQuantity||0,e.operationDefects.forEach(e=>{h+=e.quantity||0})});let f=P>0?h/P:0;console.log("Defect rate calculation:",{totalDefects:h,totalInput:P,defectRate:f});let D={status:"IN_PROGRESS"},I=0,S=!1,b=null,M={};(o||a||l||n||u)&&(n&&"All"!==n&&(D.itemName=n,M.itemName=n),u&&(D.poNumber={contains:u},M.poNumber={contains:u}),l&&"All"!==l&&(D.operations={some:{lineNo:l}},M.operations={some:{lineNo:l}}),s&&"All"!==s&&(S=!0,b=Array.isArray(s)?s[0]:s,M.status=b)),console.time("[PRISMA_DB] inProgressPOs-query");let _=await i._.productionOrder.count({where:D});console.timeEnd("[PRISMA_DB] inProgressPOs-query"),console.log("[PRISMA_DB] In-progress POs:",_),S&&(console.time("[PRISMA_DB] filteredStatusPOs-query"),I=await i._.productionOrder.count({where:M}),console.timeEnd("[PRISMA_DB] filteredStatusPOs-query"),console.log(`${b} POs:`,I)),console.time("[PRISMA_DB] machineHours-query");let w=await i._.operation.findMany({where:{startTime:{gte:m},endTime:{not:null},...c},select:{startTime:!0,endTime:!0,lineNo:!0}});console.timeEnd("[PRISMA_DB] machineHours-query"),console.log("[PRISMA_DB] Machine hours data:",w.length);let O=0;if(w.length>0){let e=w.map(e=>e.startTime.getTime()),t=w.map(e=>e.endTime.getTime());O=Math.min((Math.max(...t)-Math.min(...e))/36e5/8,1)}return console.log("Machine utilization calculation:",{operationsCount:w.length,machineUtilization:`${(100*O).toFixed(1)}%`}),t.setHeader("Cache-Control","public, max-age=300"),t.status(200).json({totalProduction:A._sum.poQuantity||0,defectRate:f,inProgressPOs:_,machineUtilization:O,filteredStatusCount:S?I:null,appliedStatusValue:S?b:null,appliedFilters:{year:o||null,month:"All"!==a?a:null,line:"All"!==l?l:null,series:"All"!==n?n:null,status:"All"!==s?s:null,poNumber:u||null}})}catch(e){return console.error("[PRISMA_DB] Error fetching dashboard stats:",e),console.error("[PRISMA_DB] Dashboard stats error details:",JSON.stringify(e,Object.getOwnPropertyNames(e))),t.status(500).json({error:"Failed to fetch dashboard stats"})}}),u=(0,n.l)(o,"default"),c=(0,n.l)(o,"config"),d=new a.PagesAPIRouteModule({definition:{kind:l.x.PAGES_API,page:"/api/dashboard/stats",pathname:"/api/dashboard/stats",bundlePath:"",filename:""},userland:o})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[549],()=>r(436));module.exports=o})();