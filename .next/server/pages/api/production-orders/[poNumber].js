"use strict";(()=>{var e={};e.id=3978,e.ids=[3978],e.modules={53524:e=>{e.exports=require("@prisma/client")},98432:e=>{e.exports=require("bcryptjs")},60614:e=>{e.exports=require("next-auth/jwt")},62113:e=>{e.exports=require("next-auth/next")},47449:e=>{e.exports=require("next-auth/providers/credentials")},41649:e=>{e.exports=require("next-auth/react")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},5989:(e,t,o)=>{o.r(t),o.d(t,{config:()=>c,default:()=>p,routeModule:()=>f});var r={};o.r(r),o.d(r,{default:()=>l});var n=o(71802),i=o(47153),a=o(56249),d=o(66826),s=o(44507);async function u(e,t,o){let{poNumber:r}=e.query;if(o?.user,!r||"string"!=typeof r)return t.status(400).json({error:"PO Number is required"});if(console.log(`Production order API called for PO: ${r}`),"GET"===e.method)try{let e=await s.Z.productionOrder.findUnique({where:{poNumber:r},include:{operations:{include:{operationDefects:!0}}}});if(!e)return console.log(`No production order found for PO: ${r}`),t.status(404).json({error:"Production order not found"});console.log(`Found production order: ${e.poNumber}`);let n=o?.user?.role||"",i="string"==typeof n&&"admin"===n.toLowerCase();return console.log("User role:",n,"Is admin?",i),t.status(200).json(e)}catch(e){return console.error("Error fetching production order:",e),t.status(500).json({error:"Failed to fetch production order"})}if("PUT"===e.method)try{let n="string"==typeof e.body?JSON.parse(e.body):e.body;console.log(`Updating production order ${r} with:`,n);let i=o?.user?.role||"",a="string"==typeof i&&"admin"===i.toLowerCase();if(console.log("User role:",i,"Is admin?",a),!a)return console.log("Non-admin user tried to update a production order"),t.status(403).json({error:"Only admin users can update production orders"});let d=await s.Z.productionOrder.findUnique({where:{poNumber:r},include:{operations:{include:{operationDefects:!0},orderBy:{id:"asc"}}}});if(!d)return t.status(404).json({error:"Production order not found"});let u=d.poQuantity,l=n.quantity?parseInt(n.quantity):u,p=u!==l;p&&console.log(`Quantity is changing from ${u} to ${l}`);let c=await s.Z.$transaction(async e=>{let t=await e.productionOrder.update({where:{poNumber:r},data:{lotNumber:n.lotNumber,poQuantity:l,itemName:n.itemName,updatedAt:new Date},include:{operations:{orderBy:{id:"asc"}}}});if(0===t.operations.length){console.log(`No operations found for PO ${r}, creating them now`);let o=await e.operationStep.findMany({orderBy:{stepOrder:"asc"}}),n=await e.user.findFirst();if(!n)throw Error("No users found in the system");for(let i of o){let a=i.stepOrder===Math.min(...o.map(e=>e.stepOrder))?t.poQuantity:0;await e.operation.create({data:{productionOrderId:t.id,operation:i.operationNumber,operatorId:n.id,inputQuantity:a,encodedById:n.id,rf:1}}),console.log(`Created operation ${i.operationNumber} for PO: ${r} (Input Qty: ${a})`)}}else if(p){console.log("Updating operations due to quantity change");let o=await e.operationStep.findMany({orderBy:{stepOrder:"asc"}}),r=[...t.operations].sort((e,t)=>{let r=o.find(t=>t.operationNumber.toLowerCase()===e.operation.toLowerCase()),n=o.find(e=>e.operationNumber.toLowerCase()===t.operation.toLowerCase());return(r?.stepOrder||0)-(n?.stepOrder||0)}),n=r[0];if(n&&(await e.operation.update({where:{id:n.id},data:{inputQuantity:l}}),console.log(`Updated first operation ${n.operation} input quantity to ${l}`),n.startTime)){let t=await e.operationDefect.findMany({where:{operationId:n.id}}),o=t.reduce((e,t)=>{let o=t.defectReworkable?t.quantity-t.quantityRework:t.quantity;return e+o},0),i=t.reduce((e,t)=>e+(t.quantityReplacement||0),0);console.log(`First operation total replacements: ${i}`);let a=Math.max(0,l-o+i);if(await e.operation.update({where:{id:n.id},data:{outputQuantity:a}}),console.log(`Updated first operation output quantity to ${a}`),n.endTime)for(let t=1;t<r.length;t++){let o=r[t-1],n=r[t];if(await e.operation.update({where:{id:n.id},data:{inputQuantity:o.outputQuantity||0}}),console.log(`Cascaded update: Set ${n.operation} input to ${o.outputQuantity||0}`),n.startTime){let t=await e.operationDefect.findMany({where:{operationId:n.id}}),r=t.reduce((e,t)=>{let o=t.defectReworkable?t.quantity-t.quantityRework:t.quantity;return e+o},0),i=t.reduce((e,t)=>e+(t.quantityReplacement||0),0);console.log(`Operation ${n.operation} total replacements: ${i}`);let a=Math.max(0,(o.outputQuantity||0)-r+i);await e.operation.update({where:{id:n.id},data:{outputQuantity:a}}),console.log(`Updated ${n.operation} output quantity to ${a}`)}}}}return e.productionOrder.findUnique({where:{id:t.id},include:{operations:{include:{operationDefects:!0}}}})});return console.log(`Production order updated: ${c?.poNumber}`),t.status(200).json(c)}catch(e){return console.error("Error updating production order:",e),t.status(500).json({error:"Failed to update production order"})}if("DELETE"===e.method)try{let e=o?.user?.role||"",n="string"==typeof e&&"admin"===e.toLowerCase();if(console.log(`Delete request for production order ${r} by user role: ${e}, isAdmin: ${n}`),!n)return console.log("Non-admin user tried to delete a production order"),t.status(403).json({error:"Only admin users can delete production orders"});let i=await s.Z.productionOrder.findUnique({where:{poNumber:r},include:{operations:{include:{operationDefects:!0}}}});if(!i)return console.log(`Production order ${r} not found for deletion`),t.status(404).json({error:"Production order not found"});return await s.Z.$transaction(async e=>{for(let t of i.operations)t.operationDefects.length>0&&(console.log(`Deleting ${t.operationDefects.length} defects for operation ${t.operation}`),await e.operationDefect.deleteMany({where:{operationId:t.id}}));i.operations.length>0&&(console.log(`Deleting ${i.operations.length} operations for PO ${r}`),await e.operation.deleteMany({where:{productionOrderId:i.id}})),console.log(`Deleting production order ${r}`),await e.productionOrder.delete({where:{id:i.id}})}),console.log(`Production order ${r} successfully deleted`),t.status(200).json({message:`Production order ${r} successfully deleted`})}catch(e){return console.error("Error deleting production order:",e),t.status(500).json({error:"Failed to delete production order"})}return t.status(405).json({error:"Method not allowed"})}let l=(0,d.QO)(function(e){return async function(t,o,r){let n=o.status;o.status=function(e){console.log(`API response status code set to: ${e}`);let t=o.send;return o.send=function(e){return"string"==typeof e&&e.trim().startsWith("<!DOCTYPE html>")?(console.error("ERROR: HTML detected in API response, converting to JSON"),o.setHeader("Content-Type","application/json"),t.call(this,JSON.stringify({error:"An internal server error occurred",code:"INTERNAL_SERVER_ERROR",htmlDetected:!0}))):t.call(this,e)},n.call(this,e)};try{return r?await e(t,o,r):await e(t,o)}catch(e){if(console.error("Unhandled API error:",e),!o.writableEnded)return o.status(500).json({error:"An unexpected error occurred",message:e.message||"Unknown error",code:"INTERNAL_SERVER_ERROR"})}}}(u)),p=(0,a.l)(r,"default"),c=(0,a.l)(r,"config"),f=new n.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/production-orders/[poNumber]",pathname:"/api/production-orders/[poNumber]",bundlePath:"",filename:""},userland:r})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var o=e=>t(t.s=e),r=t.X(0,[549],()=>o(5989));module.exports=r})();