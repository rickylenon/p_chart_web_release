"use strict";(()=>{var e={};e.id=9276,e.ids=[9276],e.modules={53524:e=>{e.exports=require("@prisma/client")},98432:e=>{e.exports=require("bcryptjs")},60614:e=>{e.exports=require("next-auth/jwt")},62113:e=>{e.exports=require("next-auth/next")},47449:e=>{e.exports=require("next-auth/providers/credentials")},41649:e=>{e.exports=require("next-auth/react")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},86794:(e,t,o)=>{o.r(t),o.d(t,{config:()=>f,default:()=>p,routeModule:()=>w});var a={};o.r(a),o.d(a,{default:()=>c});var r=o(71802),n=o(47153),i=o(56249),d=o(44507),s=o(66826),u=o(41099);async function l(e,t,o){if(console.log("Operation Defects API called"),"POST"===e.method)try{let a="string"==typeof e.body?JSON.parse(e.body):e.body;console.log("Creating/Updating operation defect with data:",a);let{poNumber:r,operationCode:n,defect:i}=a;if(!r||!n||!i||!i.id)return t.status(400).json({error:"PO Number, Operation Code, and Defect data are required"});let s=o?.user?.role||"",l="string"==typeof s&&"admin"===s.toLowerCase();console.log("User role:",s,"Is admin?",l);let c=o?.user?.id?parseInt(o.user.id):null;if(!c)return t.status(401).json({error:"User ID is required for this operation"});let p=(0,u.n)(e),f=await d.Z.productionOrder.findUnique({where:{poNumber:r},include:{operations:{include:{operationDefects:!0}}}});if(!f)return t.status(404).json({error:"Production order not found"});let w=f.operations.find(e=>e.operation.toLowerCase()===n.toLowerCase());if(!w)return t.status(404).json({error:"Operation not found for this production order"});if(w.endTime&&!l)return console.log("Non-admin user tried to edit a completed operation"),t.status(403).json({error:"Only admin users can edit completed operations"});let g=await d.Z.$transaction(async e=>{if(!await e.user.findFirst())throw Error("No users found in the system");console.log(`Processing defect: ${i.name}, quantity: ${i.quantity}, rework: ${i.quantityRework}, nogood: ${i.quantityNogood}`);let t=await e.masterDefect.findUnique({where:{id:i.id}});if(!t)throw Error(`Defect with ID ${i.id} not found`);console.log(`Found defect record: ${t.name} (ID: ${t.id})`),t.isActive||console.log(`Warning: Defect ${t.name} is marked as inactive`);let o=w.operationDefects.find(e=>e.defectId===i.id);if(o){let a={...o},r=await e.operationDefect.update({where:{id:o.id},data:{quantity:i.quantity,quantityRework:i.quantityRework,quantityNogood:i.quantityNogood,quantityReplacement:"op10"===n.toLowerCase()?void 0!==i.quantityReplacement?i.quantityReplacement:i.quantity:0,defectName:t.name,recordedById:c,recordedAt:new Date}});await (0,u.U)({tableName:"operation_defects",recordId:o.id,action:"update",oldValues:a,newValues:r,userId:c,...p}),console.log(`Updated existing defect record for ${t.name} and created audit log`)}else{let o=await e.operationDefect.create({data:{operationId:w.id,defectId:t.id,defectName:t.name,defectCategory:t.category||"Unknown",defectMachine:t.machine||null,defectReworkable:t.reworkable,quantity:i.quantity,quantityRework:i.quantityRework,quantityNogood:i.quantityNogood,quantityReplacement:"op10"===n.toLowerCase()?void 0!==i.quantityReplacement?i.quantityReplacement:i.quantity:0,recordedById:c}});await (0,u.U)({tableName:"operation_defects",recordId:o.id,action:"create",newValues:o,userId:c,...p}),console.log(`Created new defect record for ${t.name} (ID: ${t.id}) and created audit log`)}let a=await e.operationDefect.findMany({where:{operationId:w.id}}),r=a.reduce((e,t)=>{let o=t.defectReworkable?t.quantity-t.quantityRework:t.quantity;return console.log(`Defect ID: ${t.defectId}, Effective: ${o}`),e+o},0);console.log(`Input quantity: ${w.inputQuantity}, Total effective defects: ${r}`);let d=a.reduce((e,t)=>e+(t.quantityReplacement||0),0);console.log(`Total replacements: ${d}`);let s=Math.max(0,w.inputQuantity-r+d);console.log(`Recalculated output quantity: ${s}`);let l=await e.operation.findUnique({where:{id:w.id}}),g=await e.operation.update({where:{id:w.id},data:{outputQuantity:s}});await (0,u.U)({tableName:"operations",recordId:w.id,action:"update",oldValues:l,newValues:g,userId:c,...p});let y=await e.operationStep.findMany({orderBy:{stepOrder:"asc"}}),m=y.find(e=>e.operationNumber.toLowerCase()===n.toLowerCase());if(!m)throw Error("Operation step not found");let q=f.operations.filter(e=>{let t=y.findIndex(t=>t.operationNumber.toLowerCase()===e.operation.toLowerCase()),o=y.findIndex(e=>e.id===m.id);return t>o}).sort((e,t)=>{let o=y.findIndex(t=>t.operationNumber.toLowerCase()===e.operation.toLowerCase()),a=y.findIndex(e=>e.operationNumber.toLowerCase()===t.operation.toLowerCase());return o-a});if(console.log(`Found ${q.length} subsequent operations to update`),w.endTime&&q.length>0){console.log("Operation is completed - cascading changes to all subsequent operations");let t=async(o=0,a=s)=>{if(o>=q.length)return;let r=q[o];console.log(`Updating operation ${r.operation} input from ${r.inputQuantity} to ${a}`);let n=await e.operation.findUnique({where:{id:r.id}}),i=await e.operation.update({where:{id:r.id},data:{inputQuantity:a}});if(await (0,u.U)({tableName:"operations",recordId:r.id,action:"update",oldValues:n,newValues:i,userId:c,...p}),r.startTime){console.log(`Operation ${r.operation} has been started - recalculating output`);let n=(await e.operationDefect.findMany({where:{operationId:r.id}})).reduce((e,t)=>e+(t.defectReworkable?t.quantity-t.quantityRework:t.quantity),0),i=Math.max(0,a-n);console.log(`Recalculated output for ${r.operation}: ${i}`);let d=await e.operation.findUnique({where:{id:r.id}}),s=await e.operation.update({where:{id:r.id},data:{outputQuantity:i}});await (0,u.U)({tableName:"operations",recordId:r.id,action:"update",oldValues:d,newValues:s,userId:c,...p}),await t(o+1,i)}else console.log(`Operation ${r.operation} hasn't been started - not calculating output yet`),await t(o+1,a)};await t()}return e.productionOrder.findUnique({where:{id:f.id},include:{operations:{include:{operationDefects:!0}}}})});return console.log(`Operation defect processed successfully for PO: ${r}`),t.status(200).json(g)}catch(e){return console.error("Error processing operation defect:",e),t.status(500).json({error:"Failed to process operation defect",details:e instanceof Error?e.message:"Unknown error"})}return t.status(405).json({error:"Method not allowed"})}let c=(0,s.QO)(l),p=(0,i.l)(a,"default"),f=(0,i.l)(a,"config"),w=new r.PagesAPIRouteModule({definition:{kind:n.x.PAGES_API,page:"/api/operation-defects",pathname:"/api/operation-defects",bundlePath:"",filename:""},userland:a})},41099:(e,t,o)=>{o.d(t,{U:()=>r,n:()=>n});var a=o(44507);async function r(e){console.log(`Creating audit log for ${e.tableName}:${e.recordId}, action: ${e.action}`);try{let t=String(e.recordId),o=e.oldValues?JSON.stringify(e.oldValues):null,r=e.newValues?JSON.stringify(e.newValues):null,n=await a.Z.auditLog.create({data:{tableName:e.tableName,recordId:t,action:e.action,oldValues:o,newValues:r,userId:e.userId,ipAddress:e.ipAddress||null,userAgent:e.userAgent||null}});return console.log(`Audit log created with ID: ${n.id}`),n}catch(e){return console.error("Error creating audit log:",e),null}}function n(e){let t=e.headers["x-forwarded-for"]||e.socket.remoteAddress||null,o=e.headers["user-agent"]||null;return{ipAddress:"string"==typeof t?t.split(",")[0].trim():null,userAgent:o}}}};var t=require("../../webpack-api-runtime.js");t.C(e);var o=e=>t(t.s=e),a=t.X(0,[549],()=>o(86794));module.exports=a})();