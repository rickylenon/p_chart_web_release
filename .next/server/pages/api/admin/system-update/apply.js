"use strict";(()=>{var e={};e.id=6748,e.ids=[6748],e.modules={53524:e=>{e.exports=require("@prisma/client")},63844:e=>{e.exports=require("adm-zip")},98432:e=>{e.exports=require("bcryptjs")},60614:e=>{e.exports=require("next-auth/jwt")},62113:e=>{e.exports=require("next-auth/next")},47449:e=>{e.exports=require("next-auth/providers/credentials")},41649:e=>{e.exports=require("next-auth/react")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},32081:e=>{e.exports=require("child_process")},57147:e=>{e.exports=require("fs")},71017:e=>{e.exports=require("path")},26248:(e,t,r)=>{r.r(t),r.d(t,{config:()=>h,default:()=>y,routeModule:()=>m});var s={};r.r(s),r.d(s,{default:()=>d});var a=r(71802),n=r(47153),i=r(56249),o=r(66826),c=r(7815),l=r(41099);async function u(e,t,r,s){try{let a=(0,l.n)(s),n=s.headers["x-user-name"]||"Unknown Admin";await (0,l.U)({tableName:"system_events",recordId:"system",action:"update",oldValues:null,newValues:{action:e,description:t,details:r,userName:n},userId:1,ipAddress:a.ipAddress,userAgent:a.userAgent})}catch(e){console.error("Failed to log system event:",e)}}async function p(e,t,r){if(console.log("System update apply API called"),"POST"!==e.method)return t.status(405).json({error:"Method not allowed"});try{let s=r?.user?.role||"";if(!("string"==typeof s&&"admin"===s.toLowerCase()))return console.log("Access denied - user role:",s),t.status(403).json({error:"Admin access required"});let a=r?.user?.name||r?.user?.username||"Unknown Admin",{updateId:n}=e.body;if(!n)return t.status(400).json({error:"Update ID is required"});console.log(`Applying system update: ${n}`);let i=new c.Z,o=await i.getUpdateInfo(n);if(!o)return t.status(404).json({error:"Update not found"});if(o.applied)return t.status(400).json({error:"Update already applied"});await u("SYSTEM_UPDATE_APPLY_START",`Starting system update application: ${o.filename} (v${o.version})`,{updateId:n,version:o.version,filename:o.filename,appliedBy:a},e);let l=await i.applyUpdate(n);if(l.success)return await u("SYSTEM_UPDATE_APPLIED",`System update applied successfully: ${o.filename} (v${o.version})`,{updateId:n,version:o.version,filename:o.filename,appliedBy:a,needsManualRestart:l.needsManualRestart},e),console.log(`Update applied successfully: ${n}`),t.status(200).json({success:!0,message:l.message,needsManualRestart:l.needsManualRestart,details:l.details});return await u("SYSTEM_UPDATE_APPLY_FAILED",`System update application failed: ${l.message}`,{updateId:n,version:o.version,filename:o.filename,appliedBy:a,error:l.message,details:l.details},e),t.status(500).json({success:!1,message:l.message,needsManualRestart:l.needsManualRestart,details:l.details})}catch(s){console.error("System update apply error:",s);let r=s instanceof Error?s.message:String(s);return await u("SYSTEM_UPDATE_APPLY_ERROR",`System update application error: ${r}`,{error:r,stack:s instanceof Error?s.stack:void 0},e),t.status(500).json({success:!1,message:"Internal server error",details:r})}}let d=(0,o.QO)(p),y=(0,i.l)(s,"default"),h=(0,i.l)(s,"config"),m=new a.PagesAPIRouteModule({definition:{kind:n.x.PAGES_API,page:"/api/admin/system-update/apply",pathname:"/api/admin/system-update/apply",bundlePath:"",filename:""},userland:s})},41099:(e,t,r)=>{r.d(t,{U:()=>a,n:()=>n});var s=r(44507);async function a(e){console.log(`Creating audit log for ${e.tableName}:${e.recordId}, action: ${e.action}`);try{let t=String(e.recordId),r=e.oldValues?JSON.stringify(e.oldValues):null,a=e.newValues?JSON.stringify(e.newValues):null,n=await s.Z.auditLog.create({data:{tableName:e.tableName,recordId:t,action:e.action,oldValues:r,newValues:a,userId:e.userId,ipAddress:e.ipAddress||null,userAgent:e.userAgent||null}});return console.log(`Audit log created with ID: ${n.id}`),n}catch(e){return console.error("Error creating audit log:",e),null}}function n(e){let t=e.headers["x-forwarded-for"]||e.socket.remoteAddress||null,r=e.headers["user-agent"]||null;return{ipAddress:"string"==typeof t?t.split(",")[0].trim():null,userAgent:r}}},7815:(e,t,r)=>{r.d(t,{Z:()=>p,y:()=>u});var s=r(57147),a=r.n(s),n=r(71017),i=r.n(n),o=r(63844),c=r.n(o),l=r(32081);class u{constructor(){this.productionPath=process.cwd(),this.tempPath=i().join(this.productionPath,"temp","system-updates"),this.backupPath=i().join(this.productionPath,"backup")}async getUpdateInfo(e){try{let t=i().join(this.tempPath,`${e}.json`);if(!a().existsSync(t))return null;return JSON.parse(a().readFileSync(t,"utf8"))}catch(e){return console.error("Failed to get update info:",e),null}}async createBackup(e){let t=i().join(this.backupPath,`backup_${e}_${Date.now()}`);for(let e of(a().existsSync(this.backupPath)||a().mkdirSync(this.backupPath,{recursive:!0}),a().mkdirSync(t,{recursive:!0}),["server.js","package.json",".next","public"])){let r=i().join(this.productionPath,e),s=i().join(t,e);a().existsSync(r)&&(a().statSync(r).isDirectory()?await this.copyDirectory(r,s):a().copyFileSync(r,s))}console.log(`Backup created at: ${t}`)}async copyDirectory(e,t){for(let r of(a().existsSync(t)||a().mkdirSync(t,{recursive:!0}),a().readdirSync(e,{withFileTypes:!0}))){let s=i().join(e,r.name),n=i().join(t,r.name);r.isDirectory()?await this.copyDirectory(s,n):a().copyFileSync(s,n)}}async stopApplication(){return new Promise(e=>{let t=i().join(this.productionPath,"stop.bat");if(!a().existsSync(t)){console.log("stop.bat not found, assuming application is stopped"),e(!0);return}let r=(0,l.spawn)("cmd.exe",["/c",t],{cwd:this.productionPath,stdio:"inherit"});r.on("close",t=>{console.log(`Stop script exited with code: ${t}`),e(0===t)}),r.on("error",t=>{console.error("Error stopping application:",t),e(!1)}),setTimeout(()=>{r.kill(),e(!1)},3e4)})}async startApplication(){return new Promise(e=>{let t=i().join(this.productionPath,"start.bat");if(!a().existsSync(t)){console.log("start.bat not found, cannot start application"),e(!1);return}let r=(0,l.spawn)("cmd.exe",["/c",t],{cwd:this.productionPath,stdio:"inherit",detached:!0});r.on("close",t=>{console.log(`Start script exited with code: ${t}`),e(0===t)}),r.on("error",t=>{console.error("Error starting application:",t),e(!1)}),setTimeout(()=>{e(!0)},1e4)})}async extractAndApplyUpdate(e){let t=new(c())(e),r=i().join(this.tempPath,"staging");for(let e of(a().existsSync(r)&&a().rmSync(r,{recursive:!0,force:!0}),a().mkdirSync(r,{recursive:!0}),t.extractAllTo(r,!0),[{source:"server.js",dest:"server.js"},{source:"package.json",dest:"package.json"},{source:".next",dest:".next"},{source:"public",dest:"public"}])){let t=i().join(r,e.source),s=i().join(this.productionPath,e.dest);a().existsSync(t)&&(a().existsSync(s)&&a().rmSync(s,{recursive:!0,force:!0}),a().statSync(t).isDirectory()?await this.copyDirectory(t,s):a().copyFileSync(t,s),console.log(`Updated: ${e.dest}`))}a().rmSync(r,{recursive:!0,force:!0})}async applyUpdate(e){let t=i().join(this.tempPath,"MANUAL_UPDATE_ACTIVE"),r=i().join(this.tempPath,"MANUAL_UPDATE_APPLIED");try{console.log(`Applying system update: ${e}`),a().writeFileSync(t,new Date().toISOString());let s=await this.getUpdateInfo(e);if(!s)return a().existsSync(t)&&a().unlinkSync(t),{success:!1,message:"Update not found"};if(s.applied)return a().existsSync(t)&&a().unlinkSync(t),{success:!1,message:"Update already applied"};console.log("Creating backup..."),await this.createBackup(e),console.log("Launching external update process...");let n=i().join(this.productionPath,"apply-update.bat");if(!a().existsSync(n))return{success:!1,message:"Update script not found: apply-update.bat",needsManualRestart:!0};let o=(0,l.spawn)("cmd.exe",["/c",n,e,this.tempPath,this.productionPath],{cwd:this.productionPath,stdio:"ignore",detached:!0});o.unref(),console.log(`External update process started (PID: ${o.pid})`),s.applied=!0;let c=i().join(this.tempPath,`${e}.json`);return a().writeFileSync(c,JSON.stringify(s,null,2)),a().writeFileSync(r,new Date().toISOString()),a().existsSync(t)&&a().unlinkSync(t),console.log("Stopping application..."),setTimeout(()=>{this.stopApplication()},1e3),{success:!0,message:`Update to version ${s.version} will be applied. The application will restart automatically.`,details:{version:s.version,updateId:e,externalProcess:!0}}}catch(e){return console.error("Error applying update:",e),a().existsSync(t)&&a().unlinkSync(t),{success:!1,message:"Update failed",details:{error:e instanceof Error?e.message:String(e)}}}}async checkGitConfiguration(){try{let e=r(57147),{execSync:t}=r(32081),s=i().join(this.productionPath,".git");if(!e.existsSync(s))return{isGitRepo:!1,hasRemote:!1,currentBranch:null,remoteUrl:null,hasCredentials:!1,canPush:!1,error:"Not a git repository"};let a=null,n=null,o=!1,c=!1;try{a=t("git rev-parse --abbrev-ref HEAD",{cwd:this.productionPath,encoding:"utf8"}).trim(),n=t("git config --get remote.origin.url",{cwd:this.productionPath,encoding:"utf8"}).trim(),o=!0,t("git push --dry-run origin HEAD",{cwd:this.productionPath,encoding:"utf8"}),c=!0}catch(e){e instanceof Error&&e.message.includes("push")&&(c=!1)}return{isGitRepo:!0,hasRemote:o,currentBranch:a,remoteUrl:n,hasCredentials:c,canPush:c}}catch(e){return{isGitRepo:!1,hasRemote:!1,currentBranch:null,remoteUrl:null,hasCredentials:!1,canPush:!1,error:e instanceof Error?e.message:String(e)}}}async getAvailableUpdates(){try{if(!a().existsSync(this.tempPath))return[];let e=a().readdirSync(this.tempPath).filter(e=>e.endsWith(".json")),t=[];for(let r of e)try{let e=JSON.parse(a().readFileSync(i().join(this.tempPath,r),"utf8"));t.push(e)}catch(e){console.warn(`Failed to parse update info file: ${r}`,e)}return t.sort((e,t)=>new Date(t.uploadedAt).getTime()-new Date(e.uploadedAt).getTime())}catch(e){return console.error("Error getting available updates:",e),[]}}async cleanup(){try{let e=await this.getAvailableUpdates(),t=new Date(Date.now()-2592e6);for(let r of e)if(new Date(r.uploadedAt)<t){let e=i().join(this.tempPath,`${r.id}.zip`),t=i().join(this.tempPath,`${r.id}.json`);a().existsSync(e)&&a().unlinkSync(e),a().existsSync(t)&&a().unlinkSync(t),console.log(`Cleaned up old update: ${r.id}`)}if(a().existsSync(this.backupPath)){let e=a().readdirSync(this.backupPath),t=new Date(Date.now()-6048e5);for(let r of e){let e=i().join(this.backupPath,r);a().statSync(e).mtime<t&&(a().rmSync(e,{recursive:!0,force:!0}),console.log(`Cleaned up old backup: ${r}`))}}}catch(e){console.error("Error during cleanup:",e)}}}let p=u}};var t=require("../../../../webpack-api-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[549],()=>r(26248));module.exports=s})();