"use strict";(()=>{var e={};e.id=9008,e.ids=[9008],e.modules={53524:e=>{e.exports=require("@prisma/client")},63844:e=>{e.exports=require("adm-zip")},98432:e=>{e.exports=require("bcryptjs")},60614:e=>{e.exports=require("next-auth/jwt")},62113:e=>{e.exports=require("next-auth/next")},47449:e=>{e.exports=require("next-auth/providers/credentials")},41649:e=>{e.exports=require("next-auth/react")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},32081:e=>{e.exports=require("child_process")},57147:e=>{e.exports=require("fs")},71017:e=>{e.exports=require("path")},17747:(e,t,r)=>{r.r(t),r.d(t,{config:()=>m,default:()=>g,routeModule:()=>f});var s={};r.r(s),r.d(s,{default:()=>y});var i=r(71802),n=r(47153),a=r(56249),o=r(66826),c=r(7815),l=r(57147),p=r.n(l),u=r(71017),d=r.n(u);async function h(e,t,r){if(console.log("System update status API called"),"GET"!==e.method)return t.status(405).json({error:"Method not allowed"});try{let e=r?.user?.role||"";if(!("string"==typeof e&&"admin"===e.toLowerCase()))return console.log("Access denied - user role:",e),t.status(403).json({error:"Admin access required"});let s=new c.Z,i="unknown";try{let e=d().join(process.cwd(),"package.json");p().existsSync(e)&&(i=JSON.parse(p().readFileSync(e,"utf8")).version||"unknown")}catch(e){console.warn("Failed to read current version:",e)}let n=await s.getAvailableUpdates(),a={currentVersion:i,updatesAvailable:n.length,pendingUpdates:n.filter(e=>!e.applied).length,appliedUpdates:n.filter(e=>e.applied).length,lastUpdateCheck:new Date().toISOString()};return t.status(200).json({success:!0,systemStatus:a,availableUpdates:n.map(e=>({id:e.id,filename:e.filename,version:e.version,size:e.size,uploadedBy:e.uploadedBy,uploadedAt:e.uploadedAt,applied:e.applied,fileCount:e.files.length}))})}catch(r){console.error("System update status error:",r);let e=r instanceof Error?r.message:String(r);return t.status(500).json({success:!1,message:"Internal server error",details:e})}}let y=(0,o.QO)(h),g=(0,a.l)(s,"default"),m=(0,a.l)(s,"config"),f=new i.PagesAPIRouteModule({definition:{kind:n.x.PAGES_API,page:"/api/admin/system-update/status",pathname:"/api/admin/system-update/status",bundlePath:"",filename:""},userland:s})},7815:(e,t,r)=>{r.d(t,{Z:()=>u,y:()=>p});var s=r(57147),i=r.n(s),n=r(71017),a=r.n(n),o=r(63844),c=r.n(o),l=r(32081);class p{constructor(){this.productionPath=process.cwd(),this.tempPath=a().join(this.productionPath,"temp","system-updates"),this.backupPath=a().join(this.productionPath,"backup")}async getUpdateInfo(e){try{let t=a().join(this.tempPath,`${e}.json`);if(!i().existsSync(t))return null;return JSON.parse(i().readFileSync(t,"utf8"))}catch(e){return console.error("Failed to get update info:",e),null}}async createBackup(e){let t=a().join(this.backupPath,`backup_${e}_${Date.now()}`);for(let e of(i().existsSync(this.backupPath)||i().mkdirSync(this.backupPath,{recursive:!0}),i().mkdirSync(t,{recursive:!0}),["server.js","package.json",".next","public"])){let r=a().join(this.productionPath,e),s=a().join(t,e);i().existsSync(r)&&(i().statSync(r).isDirectory()?await this.copyDirectory(r,s):i().copyFileSync(r,s))}console.log(`Backup created at: ${t}`)}async copyDirectory(e,t){for(let r of(i().existsSync(t)||i().mkdirSync(t,{recursive:!0}),i().readdirSync(e,{withFileTypes:!0}))){let s=a().join(e,r.name),n=a().join(t,r.name);r.isDirectory()?await this.copyDirectory(s,n):i().copyFileSync(s,n)}}async stopApplication(){return new Promise(e=>{let t=a().join(this.productionPath,"stop.bat");if(!i().existsSync(t)){console.log("stop.bat not found, assuming application is stopped"),e(!0);return}let r=(0,l.spawn)("cmd.exe",["/c",t],{cwd:this.productionPath,stdio:"inherit"});r.on("close",t=>{console.log(`Stop script exited with code: ${t}`),e(0===t)}),r.on("error",t=>{console.error("Error stopping application:",t),e(!1)}),setTimeout(()=>{r.kill(),e(!1)},3e4)})}async startApplication(){return new Promise(e=>{let t=a().join(this.productionPath,"start.bat");if(!i().existsSync(t)){console.log("start.bat not found, cannot start application"),e(!1);return}let r=(0,l.spawn)("cmd.exe",["/c",t],{cwd:this.productionPath,stdio:"inherit",detached:!0});r.on("close",t=>{console.log(`Start script exited with code: ${t}`),e(0===t)}),r.on("error",t=>{console.error("Error starting application:",t),e(!1)}),setTimeout(()=>{e(!0)},1e4)})}async extractAndApplyUpdate(e){let t=new(c())(e),r=a().join(this.tempPath,"staging");for(let e of(i().existsSync(r)&&i().rmSync(r,{recursive:!0,force:!0}),i().mkdirSync(r,{recursive:!0}),t.extractAllTo(r,!0),[{source:"server.js",dest:"server.js"},{source:"package.json",dest:"package.json"},{source:".next",dest:".next"},{source:"public",dest:"public"}])){let t=a().join(r,e.source),s=a().join(this.productionPath,e.dest);i().existsSync(t)&&(i().existsSync(s)&&i().rmSync(s,{recursive:!0,force:!0}),i().statSync(t).isDirectory()?await this.copyDirectory(t,s):i().copyFileSync(t,s),console.log(`Updated: ${e.dest}`))}i().rmSync(r,{recursive:!0,force:!0})}async applyUpdate(e){let t=a().join(this.tempPath,"MANUAL_UPDATE_ACTIVE"),r=a().join(this.tempPath,"MANUAL_UPDATE_APPLIED");try{console.log(`Applying system update: ${e}`),i().writeFileSync(t,new Date().toISOString());let s=await this.getUpdateInfo(e);if(!s)return i().existsSync(t)&&i().unlinkSync(t),{success:!1,message:"Update not found"};if(s.applied)return i().existsSync(t)&&i().unlinkSync(t),{success:!1,message:"Update already applied"};console.log("Creating backup..."),await this.createBackup(e),console.log("Launching external update process...");let n=a().join(this.productionPath,"apply-update.bat");if(!i().existsSync(n))return{success:!1,message:"Update script not found: apply-update.bat",needsManualRestart:!0};let o=(0,l.spawn)("cmd.exe",["/c",n,e,this.tempPath,this.productionPath],{cwd:this.productionPath,stdio:"ignore",detached:!0});o.unref(),console.log(`External update process started (PID: ${o.pid})`),s.applied=!0;let c=a().join(this.tempPath,`${e}.json`);return i().writeFileSync(c,JSON.stringify(s,null,2)),i().writeFileSync(r,new Date().toISOString()),i().existsSync(t)&&i().unlinkSync(t),console.log("Stopping application..."),setTimeout(()=>{this.stopApplication()},1e3),{success:!0,message:`Update to version ${s.version} will be applied. The application will restart automatically.`,details:{version:s.version,updateId:e,externalProcess:!0}}}catch(e){return console.error("Error applying update:",e),i().existsSync(t)&&i().unlinkSync(t),{success:!1,message:"Update failed",details:{error:e instanceof Error?e.message:String(e)}}}}async checkGitConfiguration(){try{let e=r(57147),{execSync:t}=r(32081),s=a().join(this.productionPath,".git");if(!e.existsSync(s))return{isGitRepo:!1,hasRemote:!1,currentBranch:null,remoteUrl:null,hasCredentials:!1,canPush:!1,error:"Not a git repository"};let i=null,n=null,o=!1,c=!1;try{i=t("git rev-parse --abbrev-ref HEAD",{cwd:this.productionPath,encoding:"utf8"}).trim(),n=t("git config --get remote.origin.url",{cwd:this.productionPath,encoding:"utf8"}).trim(),o=!0,t("git push --dry-run origin HEAD",{cwd:this.productionPath,encoding:"utf8"}),c=!0}catch(e){e instanceof Error&&e.message.includes("push")&&(c=!1)}return{isGitRepo:!0,hasRemote:o,currentBranch:i,remoteUrl:n,hasCredentials:c,canPush:c}}catch(e){return{isGitRepo:!1,hasRemote:!1,currentBranch:null,remoteUrl:null,hasCredentials:!1,canPush:!1,error:e instanceof Error?e.message:String(e)}}}async getAvailableUpdates(){try{if(!i().existsSync(this.tempPath))return[];let e=i().readdirSync(this.tempPath).filter(e=>e.endsWith(".json")),t=[];for(let r of e)try{let e=JSON.parse(i().readFileSync(a().join(this.tempPath,r),"utf8"));t.push(e)}catch(e){console.warn(`Failed to parse update info file: ${r}`,e)}return t.sort((e,t)=>new Date(t.uploadedAt).getTime()-new Date(e.uploadedAt).getTime())}catch(e){return console.error("Error getting available updates:",e),[]}}async cleanup(){try{let e=await this.getAvailableUpdates(),t=new Date(Date.now()-2592e6);for(let r of e)if(new Date(r.uploadedAt)<t){let e=a().join(this.tempPath,`${r.id}.zip`),t=a().join(this.tempPath,`${r.id}.json`);i().existsSync(e)&&i().unlinkSync(e),i().existsSync(t)&&i().unlinkSync(t),console.log(`Cleaned up old update: ${r.id}`)}if(i().existsSync(this.backupPath)){let e=i().readdirSync(this.backupPath),t=new Date(Date.now()-6048e5);for(let r of e){let e=a().join(this.backupPath,r);i().statSync(e).mtime<t&&(i().rmSync(e,{recursive:!0,force:!0}),console.log(`Cleaned up old backup: ${r}`))}}}catch(e){console.error("Error during cleanup:",e)}}}let u=p}};var t=require("../../../../webpack-api-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[549],()=>r(17747));module.exports=s})();