"use strict";(()=>{var e={};e.id=5221,e.ids=[5221],e.modules={53524:e=>{e.exports=require("@prisma/client")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6302:e=>{e.exports=require("xlsx")},56249:(e,r)=>{Object.defineProperty(r,"l",{enumerable:!0,get:function(){return function e(r,t){return t in r?r[t]:"then"in r&&"function"==typeof r.then?r.then(r=>e(r,t)):"function"==typeof r&&"default"===t?r:void 0}}})},29208:(e,r,t)=>{t.r(r),t.d(r,{config:()=>f,default:()=>p,routeModule:()=>m});var o={};t.r(o),t.d(o,{default:()=>c});var n=t(71802),l=t(47153),a=t(56249),i=t(19001),s=t(44507),u=t(6302);async function d(e,r){if(console.log("Upload operation lines API called"),"POST"!==e.method)return r.status(405).json({error:"Method not allowed"});try{let t,o,n,l;let a=e.headers["x-user-role"];if(!("string"==typeof a&&"admin"===a.toLowerCase()))return console.log("Access denied - user role:",a),r.status(403).json({error:"Admin access required"});let{excelData:i,mode:d}=e.body;if(!i||!d)return r.status(400).json({error:"Excel data and mode are required"});if(!["update","replace"].includes(d))return r.status(400).json({error:"Mode must be 'update' or 'replace'"});console.log(`Processing operation lines upload with mode: ${d}`);try{let e=Buffer.from(i,"base64"),l=(t=u.read(e,{type:"buffer"})).SheetNames[0];if(!l)return r.status(400).json({error:"Excel file has no worksheets"});o=t.Sheets[l],n=u.utils.sheet_to_json(o,{header:1,raw:!1,defval:""}),console.log(`Parsed ${n.length} rows from Excel`)}catch(e){return console.error("Excel parsing error:",e),r.status(400).json({error:"Invalid Excel format. Please ensure Excel file is properly formatted."})}if(0===n.length)return r.status(400).json({error:"Excel file is empty or has no valid data"});let c=n[0];if(console.log("Excel headers found:",c),!c||0===c.length)return r.status(400).json({error:"Excel file has no header row"});let p=[];for(let e=0;e<c.length;e++){let r=c[e];if(!r?.trim())continue;let t=r.trim().toUpperCase();for(let r=1;r<n.length;r++){let o=n[r][e];o?.trim()&&p.push({operationNumber:t,lineNumber:o.trim()})}}if(console.log(`Converted to ${p.length} operation lines`),0===p.length)return r.status(400).json({error:"No valid operation lines found in Excel. Please check that your Excel has operation headers (OP10, OP15, etc.) and line data."});if(p.filter(e=>/^OP\d+$/i.test(e.operationNumber)).length!==p.length){let e=[...new Set(p.filter(e=>!/^OP\d+$/i.test(e.operationNumber)).map(e=>e.operationNumber))];return console.log("Invalid operation numbers found:",e),r.status(400).json({error:"Invalid operation numbers found. Operation numbers must be in format OP10, OP15, etc.",details:[`Invalid operations: ${e.join(", ")}`]})}let f=p.filter((e,r,t)=>r===t.findIndex(r=>r.operationNumber===e.operationNumber&&r.lineNumber===e.lineNumber));if(f.length!==p.length&&console.log(`Removed ${p.length-f.length} duplicate entries from Excel`),"replace"===d)console.log("Replacing all operation lines..."),l=await s.Z.$transaction(async e=>{let r=await e.operationLine.deleteMany({});console.log(`Deleted ${r.count} existing operation lines`);let t=0,o=[];for(let r of f)try{await e.operationLine.create({data:r}),t++}catch(e){console.error(`Error inserting line ${r.operationNumber}-${r.lineNumber}:`,e),o.push(`${r.operationNumber}-${r.lineNumber}: ${e}`)}return{mode:"replace",deleted:r.count,inserted:t,errors:o,total:f.length}});else{console.log("Updating operation lines (insert new, skip existing)...");let e=0,r=0,t=[];for(let o of f)try{await s.Z.operationLine.create({data:o}),e++}catch(e){"P2002"===e.code?r++:(console.error(`Error inserting line ${o.operationNumber}-${o.lineNumber}:`,e),t.push(`${o.operationNumber}-${o.lineNumber}: ${e.message||e}`))}l={mode:"update",inserted:e,skipped:r,errors:t,total:f.length}}return console.log("Operation lines upload completed:",l),r.status(200).json({success:!0,message:`Operation lines ${"replace"===d?"replaced":"updated"} successfully`,data:l})}catch(e){return console.error("Error processing operation lines upload:",e),r.status(500).json({error:"Failed to process operation lines upload",details:void 0})}}let c=(0,i.E)(d),p=(0,a.l)(o,"default"),f=(0,a.l)(o,"config"),m=new n.PagesAPIRouteModule({definition:{kind:l.x.PAGES_API,page:"/api/admin/upload-operation-lines",pathname:"/api/admin/upload-operation-lines",bundlePath:"",filename:""},userland:o})},44507:(e,r,t)=>{t.d(r,{Z:()=>l,_:()=>n});var o=t(53524);let n=global.prisma||new o.PrismaClient,l=n},19001:(e,r,t)=>{t.d(r,{E:()=>o});function o(e){return async function(r,t){console.log("API Middleware: Checking auth");try{return console.log("API Middleware: Auth passed (dev mode)"),e(r,t)}catch(e){return console.error("API Auth middleware error:",e),t.status(500).json({error:"Internal server error in auth middleware"})}}}},47153:(e,r)=>{var t;Object.defineProperty(r,"x",{enumerable:!0,get:function(){return t}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(t||(t={}))},71802:(e,r,t)=>{e.exports=t(20145)}};var r=require("../../../webpack-api-runtime.js");r.C(e);var t=r(r.s=29208);module.exports=t})();