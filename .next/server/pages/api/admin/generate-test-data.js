"use strict";(()=>{var e={};e.id=9903,e.ids=[9903],e.modules={53524:e=>{e.exports=require("@prisma/client")},98432:e=>{e.exports=require("bcryptjs")},60614:e=>{e.exports=require("next-auth/jwt")},62113:e=>{e.exports=require("next-auth/next")},47449:e=>{e.exports=require("next-auth/providers/credentials")},41649:e=>{e.exports=require("next-auth/react")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},62584:(e,t,r)=>{r.r(t),r.d(t,{config:()=>I,default:()=>G,routeModule:()=>O});var o={};r.r(o),r.d(o,{default:()=>y});var n=r(71802),a=r(47153),i=r(56249),s=r(66826),d=r(53524),l=r(98432),u=r.n(l);let c=Symbol.for("constructDateFrom");function p(e,t){return"function"==typeof e?e(t):e&&"object"==typeof e&&c in e?e[c](t):e instanceof Date?new e.constructor(t):new Date(t)}function g(e,t,r){let o=p(r?.in||e,e);return isNaN(t)?p(r?.in||e,NaN):(t&&o.setDate(o.getDate()+t),o)}let h=new d.PrismaClient,f={low:{min:1,max:5},medium:{min:6,max:15},high:{min:16,max:30}};function m(e,t){return Math.floor(Math.random()*(t-e+1))+e}function A(e){return e[Math.floor(Math.random()*e.length)]}let N=["Precision Bearing","Control Valve","Circuit Board A23","Power Transistor","Hydraulic Pump","Sensor Assembly","Motor Housing","Cooling Fan","Drive Shaft","Filter Element"],E=["LINE-01","LINE-02","LINE-03","LINE-04","LINE-05","LINE-06","LINE-07","LINE-08","LINE-09","LINE-10"],w=["CNC-01","DRILL-02","LATHE-03","MILL-04","PRESS-05","ASSEMBLY-01","TEST-STATION-02"];async function $(){console.log("[DATA-GEN] Ensuring all users have the standard password...");try{let e=await h.user.findMany();if(0===e.length)return console.log("[DATA-GEN] No users found. Database may be empty."),[];let t=await u().hash("P@ssw0rd!123",10);for(let r of e)await h.user.update({where:{id:r.id},data:{password:t}}),console.log(`[DATA-GEN] Updated password for user: ${r.username} (${r.role})`);return console.log(`[DATA-GEN] All ${e.length} users updated with standard password`),e}catch(e){throw console.error("[DATA-GEN] Error updating user passwords:",e),e}}async function D(){let e=[];e.push("Starting test data generation..."),console.log("[DATA-GEN] Starting test data generation...");try{let t=await $(),r=await h.operationStep.findMany({orderBy:{stepOrder:"asc"}});if(0===r.length)throw Error("No operation steps found in database.");e.push(`Found ${r.length} operation steps`),console.log(`[DATA-GEN] Found ${r.length} operation steps`);let o=await h.masterDefect.findMany();if(0===o.length)throw Error("No defects found in database.");if(e.push(`Found ${o.length} defects`),console.log(`[DATA-GEN] Found ${o.length} defects`),0===t.length)throw Error("No users found in database.");e.push(`Found ${t.length} users`),console.log(`[DATA-GEN] Found ${t.length} users`);let n=new Date,a=g(n,-30,void 0);for(let i=0;i<20;i++){let s=function(e,t){let r=e.getTime();return new Date(r+Math.random()*(t.getTime()-r))}(a,n),d=`PO-${s.getFullYear()}${(s.getMonth()+1).toString().padStart(2,"0")}${s.getDate().toString().padStart(2,"0")}-${(i+1).toString().padStart(3,"0")}`,l=`LOT-${m(1e3,9999)}`,u=A(N),c=m(100,1e3);e.push(`Creating PO: ${d}, Item: ${u}, Quantity: ${c}`),console.log(`[DATA-GEN] Creating PO: ${d}, Item: ${u}, Quantity: ${c}`);try{if(await h.productionOrder.findUnique({where:{poNumber:d}})){e.push(`PO ${d} already exists, skipping`),console.log(`[DATA-GEN] PO ${d} already exists, skipping`);continue}let n=await h.productionOrder.create({data:{poNumber:d,lotNumber:l,poQuantity:c,itemName:u,status:"COMPLETED",createdAt:s,updatedAt:s}});e.push(`Created production order ID: ${n.id}`),console.log(`[DATA-GEN] Created production order ID: ${n.id}`);let a=s,i=c;for(let s of r){let r=A(t);s.operationNumber;let d=A(Object.values(f)),l=m(d.min,d.max)/100,u=Math.floor(i*l),c=i-u;i=c;let N=a,$=function(e,t,r){var o,n;return o=36e5*t,n=void 0,p(n?.in||e,+p(e,e)+o)}(N,m(1,4));a=g($,m(0,2)),e.push(`Creating operation ${s.operationNumber} with input: ${i+u}, output: ${c}, defects: ${u}`),console.log(`[DATA-GEN] Creating operation ${s.operationNumber} with input: ${i+u}, output: ${c}, defects: ${u}`);let D=await h.operation.create({data:{productionOrderId:n.id,operation:s.operationNumber,operatorId:r.id,encodedById:r.id,startTime:N,endTime:$,inputQuantity:i+u,outputQuantity:c,productionHours:m(1,4),rf:1,lineNo:A(E),shift:function(e,t){let r=t.getHours(),o=t.getMinutes();return["OP10","OP15","OP30"].includes(e)?r>=8&&(r<20||20===r&&0===o)?"DAY":"NIGHT":8===r&&o>0||r>8&&r<19||19===r&&o<59?"DAY":"NIGHT"}(s.operationNumber,$)}}),T=u;T<1&&(T=m(1,Math.max(1,Math.floor(.03*i))));let y=o.filter(e=>e.applicableOperation===s.operationNumber||null===e.applicableOperation);if(y.length>0){let t=m(1,Math.min(4,y.length)),o=[];for(let e=0;e<t;e++){let e;do e=A(y);while(o.includes(e));o.push(e)}let n=T;for(let t=0;t<o.length;t++){let a;let i=o[t];if(t===o.length-1)a=n;else{let e=Math.max(1,n-(o.length-t-1));a=m(1,e)}n-=a;let s=0,d=a;if(i.reworkable){let e=m(0,100)/100;s=Math.floor(a*e),d=a-s}e.push(`Creating defect: ${i.name}, Qty: ${a}, Rework: ${s}, NoGood: ${d}`),console.log(`[DATA-GEN] Creating defect: ${i.name}, Qty: ${a}, Rework: ${s}, NoGood: ${d}`),await h.operationDefect.create({data:{operationId:D.id,defectId:i.id,defectCategory:i.category||"UNKNOWN",defectMachine:A(w),defectReworkable:i.reworkable||!1,quantity:a,quantityRework:s,quantityNogood:d,recordedById:r.id,recordedAt:$}})}}}await h.productionOrder.update({where:{id:n.id},data:{status:"COMPLETED",currentOperation:r[r.length-1].operationNumber,currentOperationStartTime:g(s,r.length-1),currentOperationEndTime:g(s,r.length),updatedAt:g(s,r.length)}}),e.push(`Completed production order: ${d}`),console.log(`[DATA-GEN] Completed production order: ${d}`)}catch(t){e.push(`Error processing production order ${d}: ${t instanceof Error?t.message:"Unknown error"}`),console.error(`[DATA-GEN] Error processing production order ${d}:`,t)}}return e.push("Test data generation completed successfully!"),console.log("[DATA-GEN] Test data generation completed successfully!"),e}catch(t){throw e.push(`Error generating test data: ${t instanceof Error?t.message:"Unknown error"}`),console.error("[DATA-GEN] Error generating test data:",t),t}}async function T(e,t,r){if("POST"!==e.method)return t.status(405).json({error:"Method not allowed"});try{let e=(r.user?.role||"").toLowerCase();if(console.log("[DATA-GEN] User role:",e),"admin"!==e)return t.status(403).json({error:"Not authorized. Admin access required."});console.log("[DATA-GEN] Starting test data generation process"),console.log("[DATA-GEN] User:",r.user?.name);let o=await D();return t.status(200).json({success:!0,message:"Test data generated successfully",details:o})}catch(e){return console.error("[DATA-GEN] Error generating test data:",e),t.status(500).json({error:"Failed to generate test data",details:e instanceof Error?e.message:"Unknown error"})}}let y=(0,s.QO)(T),G=(0,i.l)(o,"default"),I=(0,i.l)(o,"config"),O=new n.PagesAPIRouteModule({definition:{kind:a.x.PAGES_API,page:"/api/admin/generate-test-data",pathname:"/api/admin/generate-test-data",bundlePath:"",filename:""},userland:o})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[549],()=>r(62584));module.exports=o})();