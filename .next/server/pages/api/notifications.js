"use strict";(()=>{var e={};e.id=4437,e.ids=[4437],e.modules={53524:e=>{e.exports=require("@prisma/client")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},29505:e=>{e.exports=import("socket.io")},56249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,i){return i in t?t[i]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,i)):"function"==typeof t&&"default"===i?t:void 0}}})},17363:(e,t,i)=>{i.a(e,async(e,o)=>{try{i.r(t),i.d(t,{config:()=>u,default:()=>c,routeModule:()=>l});var n=i(71802),r=i(47153),a=i(56249),s=i(72706),d=e([s]);s=(d.then?(await d)():d)[0];let c=(0,a.l)(s,"default"),u=(0,a.l)(s,"config"),l=new n.PagesAPIRouteModule({definition:{kind:r.x.PAGES_API,page:"/api/notifications",pathname:"/api/notifications",bundlePath:"",filename:""},userland:s});o()}catch(e){o(e)}})},44507:(e,t,i)=>{i.d(t,{Z:()=>r,_:()=>n});var o=i(53524);let n=global.prisma||new o.PrismaClient,r=n},72706:(e,t,i)=>{i.a(e,async(e,o)=>{try{i.r(t),i.d(t,{default:()=>s});var n=i(44507),r=i(44423),a=e([r]);async function s(e,t){let i=e.headers["x-user-id"],o=e.headers["x-user-role"];if(!i)return console.log("Notifications API: Missing X-User-Id header"),t.status(401).json({error:"Unauthorized - Missing user identification"});let n=parseInt(i,10);if(isNaN(n))return console.log("Notifications API: Invalid user ID format:",i),t.status(400).json({error:"Invalid user ID format"});console.log("Notifications API: Authenticated user:",{userId:n,role:o});try{switch(e.method){case"GET":return await d(e,t,n);case"POST":return await c(e,t,n);case"PUT":return await u(e,t,n);default:return t.status(405).json({error:"Method not allowed"})}}catch(e){return console.error("Error in notifications API:",e),t.status(500).json({error:"Internal server error"})}}async function d(e,t,i){let{page:o="1",limit:r="10",type:a="",isRead:s="",count:d=""}=e.query,c=parseInt(o,10),u=parseInt(r,10),l=(c-1)*u,f={userId:i};if(a&&(f.type=a),"true"===s?f.isRead=!0:"false"===s&&(f.isRead=!1),"true"===d){let e=await n.Z.notification.count({where:f}),o=await n.Z.notification.count({where:{...f,isRead:!1}}),r={};return""===a&&(r=(await n.Z.notification.groupBy({by:["type"],where:{userId:i,isRead:!1},_count:{id:!0}})).reduce((e,t)=>(e[t.type]=t._count.id,e),{})),t.status(200).json({total:e,unread:o,byType:r})}let p=await n.Z.notification.findMany({where:f,orderBy:{createdAt:"desc"},skip:l,take:u}),g=await n.Z.notification.count({where:f});return t.status(200).json({notifications:p,pagination:{page:c,limit:u,total:g,pages:Math.ceil(g/u)}})}async function c(e,t,i){let o;let{type:a,title:s,message:d,linkUrl:c,targetUserId:u,targetRole:l,sourceId:f,sourceType:p,metadata:g,emitEvent:m=!0,emitToAll:I=!1}=e.body;if(!a||!s||!d)return t.status(400).json({error:"Missing required fields: type, title, message"});if(u){if(o=parseInt(u,10),isNaN(o))return t.status(400).json({error:"Invalid target user ID format"})}else l||I||(o=i);let w=await n.Z.notification.create({data:{type:a,title:s,message:d,linkUrl:c,userId:o||i,sourceId:f?.toString(),sourceType:p,metadata:g}});if(m)try{let e=(0,r.getSafeIO)();if(!e)return console.warn("Socket.IO instance is not available, notification will be stored but not emitted"),t.status(201).json({notification:w,warning:"Notification created but WebSocket event not emitted (Socket.IO not available)"});let i={...w,userId:void 0};if(I)console.log(`Broadcasting ${a} notification to all users`),e.emit(`notification-${a}`,i),e.emit("notification-count-update",{type:a});else if(l){let t=`role-${l.toLowerCase()}`;console.log(`Emitting ${a} notification to role: ${t}`),e.to(t).emit(`notification-${a}`,i),e.to(t).emit("notification-count-update",{type:a})}else o&&(console.log(`Emitting ${a} notification to user: ${o}`),e.to(`user-${o}`).emit(`notification-${a}`,i),e.to(`user-${o}`).emit("notification-count-update",{type:a}))}catch(e){return console.error("Failed to emit WebSocket event:",e),t.status(201).json({notification:w,warning:"Notification created but WebSocket event failed to emit"})}return t.status(201).json({notification:w})}async function u(e,t,i){let{id:o,all:r,type:a}=e.body;if(o){if(!await n.Z.notification.findFirst({where:{id:o,userId:i}}))return t.status(404).json({error:"Notification not found"});let e=await n.Z.notification.update({where:{id:o},data:{isRead:!0}});return t.status(200).json({notification:e})}if(r){let{count:e}=await n.Z.notification.updateMany({where:{userId:i,isRead:!1},data:{isRead:!0}});return t.status(200).json({markedAsRead:e})}if(!a)return t.status(400).json({error:"Missing parameter: id, all, or type is required"});{let{count:e}=await n.Z.notification.updateMany({where:{userId:i,type:a,isRead:!1},data:{isRead:!0}});return t.status(200).json({markedAsRead:e})}}r=(a.then?(await a)():a)[0],o()}catch(e){o(e)}})},44423:(e,t,i)=>{i.a(e,async(e,o)=>{try{let s;i.r(t),i.d(t,{default:()=>a,getIO:()=>d,getSafeIO:()=>c});var n=i(29505),r=e([n]);function a(e,t){if(t.socket.server.io){console.log("Socket server already running"),t.end();return}console.log("Setting up Socket.IO server...");let i=new n.Server(t.socket.server,{path:"/api/socketio",addTrailingSlash:!1,cors:{origin:"*",methods:["GET","POST"],credentials:!0}});t.socket.server.io=i,s=i,i.on("connection",e=>{console.log("Client connected:",e.id),e.on("join-user-room",t=>{t&&(console.log(`User ${t} joined their personal room`),e.join(`user-${t}`))}),e.on("join-role-room",t=>{if(t){let i=t.toLowerCase();console.log(`User joined ${i} room`),e.join(`role-${i}`)}}),e.on("defect-edit-requested",e=>{console.log("Defect edit requested:",e);let t={id:e.requestId||Date.now().toString(),type:"defect-edit",title:"New Defect Edit Request",message:`A defect edit has been requested for ${e.defectCode||"a defect"}`,isRead:!1,createdAt:new Date().toISOString(),linkUrl:"/notifications",sourceId:e.defectId,sourceType:"defect"};i.to("role-admin").emit("notification-defect-edit",t),i.to("role-admin").emit("notification-count-update",{type:"defect-edit"}),console.log("Emitted defect-edit notification to all admins")}),e.on("defect-edit-resolved",e=>{console.log("Defect edit resolved:",e);let t={id:e.responseId||Date.now().toString(),type:"defect-edit",title:"Defect Edit Request Resolved",message:e.approved?"Your defect edit request was approved":"Your defect edit request was rejected",isRead:!1,createdAt:new Date().toISOString(),linkUrl:"/notifications",sourceId:e.defectId,sourceType:"defect"};e.requestedById&&(i.to(`user-${e.requestedById}`).emit("notification-defect-edit",t),i.to(`user-${e.requestedById}`).emit("notification-count-update",{type:"defect-edit"}),console.log(`Emitted defect-edit resolution notification to user ${e.requestedById}`))}),e.on("disconnect",()=>{console.log("Client disconnected:",e.id)})}),console.log("Socket server initialized successfully"),t.end()}n=(r.then?(await r)():r)[0];let d=()=>{if(!s)throw Error("Socket.IO has not been initialized. Call the socket API route first.");return s},c=()=>s||null;o()}catch(e){o(e)}})},47153:(e,t)=>{var i;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return i}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(i||(i={}))},71802:(e,t,i)=>{e.exports=i(20145)}};var t=require("../../webpack-api-runtime.js");t.C(e);var i=t(t.s=17363);module.exports=i})();