"use strict";(()=>{var e={};e.id=1127,e.ids=[1127],e.modules={53524:e=>{e.exports=require("@prisma/client")},98432:e=>{e.exports=require("bcryptjs")},60614:e=>{e.exports=require("next-auth/jwt")},62113:e=>{e.exports=require("next-auth/next")},47449:e=>{e.exports=require("next-auth/providers/credentials")},41649:e=>{e.exports=require("next-auth/react")},20145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},59273:(e,t,r)=>{r.r(t),r.d(t,{config:()=>f,default:()=>c,routeModule:()=>p});var o={};r.r(o),r.d(o,{default:()=>l});var n=r(71802),s=r(47153),i=r(56249),d=r(66826),a=r(44507);async function u(e,t,r){if(console.log("Operation Defect Edit Requests API called"),"POST"===e.method)try{let o="string"==typeof e.body?JSON.parse(e.body):e.body;console.log("Creating edit request with data:",o);let{operationDefectId:n,poNumber:s,currentQty:i,currentRw:d,currentNg:u,requestedQty:l,requestedRw:c,requestedNg:f,reason:p,requestId:g,requestType:q="edit",operationId:y,defectId:m,defectName:h,defectCategory:I,defectReworkable:w,defectMachine:D,currentReplacement:j,requestedReplacement:$}=o;if(console.log(`Request type: ${q}`),"add"===q){let e=[];if(y||e.push("operationId"),s||e.push("poNumber"),p||e.push("reason"),m||e.push("defectId"),h||e.push("defectName"),void 0===l&&e.push("requestedQty"),void 0===c&&e.push("requestedRw"),void 0===f&&e.push("requestedNg"),e.length>0)return console.error(`Missing fields for add request: ${e.join(", ")}`),console.log("Received data:",JSON.stringify({operationId:y,poNumber:s,reason:p,defectId:m,defectName:h,requestedQty:l,requestedRw:c,requestedNg:f},null,2)),t.status(400).json({error:`Missing required fields for add request: ${e.join(", ")}`});console.log("Processing add request with data:",{operationId:y,defectId:m,poNumber:s,requestedQty:l,requestedRw:c,requestedNg:f})}else{let e=[];if(n||e.push("operationDefectId"),s||e.push("poNumber"),p||e.push("reason"),void 0===i&&e.push("currentQty"),void 0===d&&e.push("currentRw"),void 0===u&&e.push("currentNg"),void 0===l&&e.push("requestedQty"),void 0===c&&e.push("requestedRw"),void 0===f&&e.push("requestedNg"),e.length>0)return console.error(`Missing fields for edit request: ${e.join(", ")}`),t.status(400).json({error:`Missing required fields for edit request: ${e.join(", ")}`})}let v=n?"string"==typeof n?parseInt(n,10):n:null,R=y?"string"==typeof y?parseInt(y,10):y:null,b=m?"string"==typeof m?parseInt(m,10):m:null,N=r?.user?.id;if(!N)return t.status(401).json({error:"Unauthorized - User not authenticated"});let E="string"==typeof N?parseInt(N,10):N,A=r?.user?.role||"",x="string"==typeof A&&"admin"===A.toLowerCase();if(console.log("User role:",A,"Is admin?",x),x)return t.status(400).json({error:"Admin users can edit directly instead of creating edit requests"});let O=null,U=null;if("edit"===q||"delete"===q){console.log(`Looking up operation defect with ID: ${v}`);let e=h||null;if(console.log(`Defect name from request: ${e}`),!(O=await a.Z.operationDefect.findUnique({where:{id:v},include:{defect:!0}}))||e&&O.defect?.name!==e){if(console.log(`Defect ID ${v} not found or name mismatch. Found: ${O?.defect?.name}, Expected: ${e}`),console.log("Attempting to find defect by name instead..."),!e)return console.log(`No defect name provided and defect ID ${v} not found`),t.status(404).json({error:"Operation defect not found"});{let r=await a.Z.productionOrder.findUnique({where:{poNumber:s},include:{operations:!0}});if(!r)return t.status(404).json({error:"Production order not found"});let o=r.operations,n=await a.Z.masterDefect.findFirst({where:{name:e}});if(!n)return console.log(`No defect found with name: ${e}`),t.status(404).json({error:"Defect not found by name"});if(console.log(`Found defect by name: ${e}, ID: ${n.id}`),!(O=await a.Z.operationDefect.findFirst({where:{operationId:{in:o.map(e=>e.id)},defectId:n.id},include:{defect:!0}})))return console.log(`No operation defect found with defect name: ${e}`),t.status(404).json({error:"Operation defect not found by name"});console.log(`Found operation defect with defect name: ${e}, ID: ${O.id}, Operation ID: ${O.operationId}`),v=O.id,console.log(`Updated operation defect ID to use: ${v}`)}}if(!O)return t.status(404).json({error:"Operation defect not found"});U=O.operationId}else U=R;if(null===U)return console.error("Operation ID is null. Required for all request types."),t.status(400).json({error:"Missing operation ID for request"});let B=await a.Z.productionOrder.findUnique({where:{poNumber:s}});if(!B)return t.status(404).json({error:"Production order not found"});let P=await a.Z.operation.findUnique({where:{id:U}});if(!P)return t.status(404).json({error:"Operation not found"});if(!P.endTime)return t.status(400).json({error:"Edit requests can only be created for completed operations"});if(g){console.log(`Updating existing edit request with ID: ${g}`);let e="string"==typeof g?parseInt(g,10):g,r=await a.Z.operationDefectEditRequest.findUnique({where:{id:e},include:{requestedBy:!0}});if(!r)return t.status(404).json({error:"Edit request not found"});if(r.requestedById!==E)return t.status(403).json({error:"Not authorized to update this request"});let o=await a.Z.operationDefectEditRequest.update({where:{id:e},data:{requestedQty:l,requestedRw:c,requestedNg:f,reason:p,requestType:q||"edit",status:"pending"}});return console.log("Updated edit request:",o),t.status(200).json({message:"Edit request updated successfully",editRequest:o})}let Z={operation:{connect:{id:U}},productionOrder:{connect:{id:B.id}},requestedBy:{connect:{id:E}},currentQty:i||0,currentRw:d||0,currentNg:u||0,currentReplacement:o.currentReplacement||0,requestedQty:l,requestedRw:c,requestedNg:f,requestedReplacement:o.requestedReplacement||0,reason:p,status:"pending",requestType:q,operationCode:o.operationCode};("edit"===q||"delete"===q)&&v?Z.operationDefect={connect:{id:v}}:"add"===q&&(Z.defectId=b,Z.defectName=h,Z.defectCategory=I,Z.defectReworkable=w,Z.defectMachine=D),console.log("Creating edit request with data:",Z);try{let e=await a.Z.operationDefectEditRequest.create({data:Z});console.log("Created edit request:",e);try{console.log("Creating notification for admin users");let t=await a.Z.user.findMany({where:{role:{equals:"Admin"}},select:{id:!0}});if(console.log(`Found ${t.length} admin users to notify`),t.length>0){let r=t.map(t=>{let r="edit";return"add"===q&&(r="add"),"delete"===q&&(r="delete"),a.Z.notification.create({data:{type:"defect-edit",title:`New Defect ${r.charAt(0).toUpperCase()+r.slice(1)} Request`,message:`A defect ${r} has been requested for ${h||o.defectName||`Defect ID: ${n||m}`} on PO: ${s}`,userId:t.id,sourceId:e.id.toString(),sourceType:"operationDefectEditRequest",linkUrl:"/operation-defects-edit-requests",isRead:!1}})});await Promise.all(r),console.log("Notifications created successfully in database")}else console.log("No admin users found to notify")}catch(e){console.error("Error creating notification:",e)}return t.status(201).json({message:"Edit request created successfully",editRequest:e})}catch(e){return console.error("Error creating edit request:",e),t.status(500).json({error:"Internal server error",details:e.toString()})}}catch(e){return console.error("Error creating edit request:",e),t.status(500).json({error:"Internal server error",details:e.toString()})}else if("GET"!==e.method)return t.setHeader("Allow",["GET","POST"]),t.status(405).json({error:`Method ${e.method} Not Allowed`});else try{let{status:r,count:o,sortField:n,sortDirection:s,operationDefectId:i,operationId:d,requestType:u}=e.query,l={};if(r&&"string"==typeof r&&(l.status=r),i){if(console.log(`Filtering by operationDefectId: ${i}`),"undefined"===i||"null"===i)return console.log("Invalid operationDefectId value (undefined/null), returning empty results"),t.status(200).json({editRequests:[]});let e=Array.isArray(i)?i[0]:i,r=parseInt(e,10);if(isNaN(r))return console.log("Invalid operationDefectId (not a number), returning empty results"),t.status(200).json({editRequests:[]});l.operationDefectId=r}if(d){console.log(`Filtering by operationId: ${d}`);let e=Array.isArray(d)?d[0]:d,r=parseInt(e,10);if(isNaN(r))return console.log("Invalid operationId (not a number), returning empty results"),t.status(200).json({editRequests:[]});l.operationId=r}if(u&&(console.log(`Filtering by requestType: ${u}`),l.requestType=Array.isArray(u)?u[0]:u),"true"===o){console.log("Counting edit requests with filter:",l);let e=await a.Z.operationDefectEditRequest.count({where:l});return console.log("Edit request count:",e),t.status(200).json({count:e})}let c={createdAt:"desc"};if(n&&"string"==typeof n){let e={poNumber:"productionOrder.poNumber",operation:"operation.operation",defect:"operationDefect.defect.name",currentQty:"currentQty",requestedQty:"requestedQty",requestedBy:"requestedBy.name",createdAt:"createdAt",status:"status"}[n];if(e){if(console.log(`Sorting by ${e} in ${s||"desc"} order`),e.includes(".")){let[t,r]=e.split(".");c={[t]:{[r]:"asc"===s?"asc":"desc"}}}else c={[e]:"asc"===s?"asc":"desc"}}}console.log("Fetching edit requests with filter:",l,"and order:",c);let f=await a.Z.operationDefectEditRequest.findMany({where:l,include:{operationDefect:!0,operation:!0,productionOrder:!0,requestedBy:{select:{id:!0,name:!0,email:!0}},resolvedBy:{select:{id:!0,name:!0,email:!0}}},orderBy:c});return console.log(`Found ${f.length} edit requests`),f.length>0&&console.log("First edit request details:",{id:f[0].id,operationDefectId:f[0].operationDefectId,requestedBy:f[0].requestedBy?"object"==typeof f[0].requestedBy?`${f[0].requestedBy.name} (${f[0].requestedBy.id})`:f[0].requestedBy:"Unknown",status:f[0].status}),t.status(200).json({editRequests:f})}catch(e){return console.error("Error fetching edit requests:",e),t.status(500).json({error:"Internal server error",details:e instanceof Error?e.message:"Unknown error"})}}let l=(0,d.QO)(u),c=(0,i.l)(o,"default"),f=(0,i.l)(o,"config"),p=new n.PagesAPIRouteModule({definition:{kind:s.x.PAGES_API,page:"/api/operation-defect-edit-requests",pathname:"/api/operation-defect-edit-requests",bundlePath:"",filename:""},userland:o})}};var t=require("../../webpack-api-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[549],()=>r(59273));module.exports=o})();